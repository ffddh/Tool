{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "mobile-alt"
  },
  "name" : "ChinaTelecom_2024",
  "script" : "\/\/ Script: 2Ya & 脑瓜\n\/\/ 电报群：https:\/\/t.me\/Scriptable_JS @anker1209\n\/\/ 该脚本小尺寸组件支持两种模式，默认为圆环进度条模式，主屏幕长按小组件-->编辑小组件-->Parameter，输入1，使用文字模式\n\/\/ 渐变进度条为试验性功能，默认关闭\n\/\/ 获取Cookie重写 https:\/\/raw.githubusercontent.com\/dompling\/Script\/master\/10000\/index.js\n\/\/ version:1.1.2\n\/\/ update:2024\/04\/21\n\nif (typeof require === \"undefined\") require = importModule;\nconst { DmYY, Runing } = require(\".\/DmYY\");\n\nclass Widget extends DmYY {\n  constructor(arg) {\n    super(arg);\n    this.name = \"中国电信\";\n    this.en = \"ChinaTelecom_2021\";\n    this.logo =\n      \"https:\/\/raw.githubusercontent.com\/anker1209\/icon\/main\/zgdx-big.png\";\n    this.smallLogo =\n      \"https:\/\/raw.githubusercontent.com\/anker1209\/icon\/main\/zgdx.png\";\n    this.Run();\n  }\n  cookie = \"\"; \/\/ 推荐使用Boxjs代理缓存，若无请自行手动抓包后在此输入中国电信cookie数据或运行脚本-->账号设置-->手动输入。\n  widgetParam = args.widgetParameter;\n\n  gradient = false;\n  usedFlow = false;\n\n  flowColorHex = \"FF6620\";\n  voiceColorHex = \"78C100\";\n\n  ringStackSize = 61;\n  ringTextSize = 14;\n  feeTextSize = 21;\n  textSize = 13;\n  smallPadding = 16;\n  padding = 10;\n  logoScale = 0.24;\n\n  canvSize = 178;\n  canvWidth = 18;\n  canvRadius = 80;\n\n  format = (str) => {\n    return parseInt(str) >= 10 ? str : `0${str}`;\n  };\n\n  date = new Date();\n  arrUpdateTime = [\n    this.format(this.date.getMonth() + 1),\n    this.format(this.date.getDate()),\n    this.format(this.date.getHours()),\n    this.format(this.date.getMinutes()),\n  ];\n\n  fee = {\n    title: \"剩余话费\",\n    number: 0,\n    unit: \"元\",\n    en: \"¥\",\n  };\n\n  flow = {\n    percent: 0,\n    max: 40,\n    title: \"剩余流量\",\n    number: 0,\n    unit: \"MB\",\n    en: \"MB\",\n    icon: \"antenna.radiowaves.left.and.right\",\n    iconColor: new Color(\"1ab6f8\"),\n    FGColor: new Color(this.flowColorHex),\n    BGColor: new Color(this.flowColorHex, 0.2),\n    colors: [],\n  };\n\n  voice = {\n    percent: 0,\n    title: \"剩余语音\",\n    number: 0,\n    unit: \"分钟\",\n    en: \"MIN\",\n    icon: \"phone.fill\",\n    iconColor: new Color(\"30d15b\"),\n    FGColor: new Color(this.voiceColorHex),\n    BGColor: new Color(this.voiceColorHex, 0.2),\n    colors: [],\n  };\n\n  point = {\n    title: \"更新时间\",\n    number: `${this.arrUpdateTime[2]}:${this.arrUpdateTime[3]}`,\n    unit: \"\",\n    icon: \"arrow.2.circlepath\",\n    iconColor: new Color(\"fc6d6d\"),\n  };\n\n  fetchUrl = {\n    login: \"https:\/\/e.dlife.cn\/index.do\",\n    detail: \"https:\/\/e.dlife.cn\/user\/package_detail.do\",\n    balance: \"https:\/\/e.dlife.cn\/user\/balance.do\",\n    bill: \"https:\/\/e.dlife.cn\/user\/bill.do\",\n  };\n\n  init = async () => {\n    if (!this.settings.dataSource) {\n      await this.getData();\n    } else {\n      Object.keys(this.settings.dataSource).forEach((key) => {\n        this[key] = { ...this[key], ...this.settings.dataSource[key] };\n      });\n      this.getData();\n    }\n  };\n\n  formatFlow(number) {\n    const n = number \/ 1024;\n    if (n < 1024) {\n      return { count: n.toFixed(2), unit: \"MB\" };\n    }\n    return { count: (n \/ 1024).toFixed(2), unit: \"GB\" };\n  }\n\n  unlimitUser(flow) {\n    const usedFlow = this.formatFlow(flow);\n    this.flow.title = \"已用流量\";\n    this.flow.number = usedFlow.count;\n    this.flow.unit = usedFlow.unit;\n    this.flow.en = usedFlow.unit;\n    if (this.flow.unit === \"GB\") {\n      this.flow.percent = (\n        100 -\n        (this.flow.number \/ (this.flow.max || 40)) * 100\n      ).toFixed(2);\n    } else {\n      this.flow.percent = (\n        100 -\n        (this.flow.number \/ ((this.flow.max || 40) * 1024)) * 100\n      ).toFixed(2);\n    }\n  }\n\n  updateCookie = async (loginUrl) => {\n    if (loginUrl) {\n      const url = loginUrl.match(\/(http.+)&sign\/)?.[1] || loginUrl;\n      const req = await new Request(url);\n      await req.load();\n      const cookie = req.response.headers[\"Set-Cookie\"];\n      if (cookie) {\n        this.settings.cookie = cookie;\n        this.saveSettings(false);\n      }\n    }\n  };\n\n  getData = async () => {\n    if (!this.settings.china_telecom_url) {\n      return this.notify(this.name, \"请配置登录地址\");\n    }\n    await this.updateCookie(this.settings.china_telecom_url);\n    const detail = await this.http({\n      url: this.fetchUrl.detail,\n      headers: {\n        Cookie: this.settings.cookie,\n      },\n    });\n\n    let flows = {\n        balanceAmount: 0,\n        usageAmount: 0,\n        ratableAmount: 0,\n      },\n      voice = {\n        balanceAmount: 0,\n        usageAmount: 0,\n        ratableAmount: 0,\n      };\n\n    detail.items?.forEach((data) => {\n      data.items.forEach((item) => {\n        if (item.balanceAmount != \"999999999999\" && item.unitTypeId === \"3\") {\n          Object.keys(flows).forEach((key) => {\n            flows[key] += Number(item[key]);\n          });\n        }\n        if (item.unitTypeId === \"1\") {\n          Object.keys(voice).forEach((key) => {\n            voice[key] += Number(item[key]);\n          });\n        }\n      });\n    });\n\n    this.flow.percent = (\n      (flows.balanceAmount \/ flows.ratableAmount) *\n      100\n    ).toFixed(2);\n    const flow = this.formatFlow(flows.balanceAmount);\n    this.flow.number = flow.count;\n    this.flow.unit = flow.unit;\n    this.flow.en = flow.unit;\n\n    if (voice) {\n      this.voice.percent = (\n        (Number(voice.balanceAmount) \/ Number(voice.ratableAmount)) *\n        100\n      ).toFixed(2);\n\n      this.voice.number = voice.balanceAmount;\n    }\n\n    const balance = await this.http({\n      url: this.fetchUrl.balance,\n      headers: {\n        Cookie: this.settings.cookie,\n      },\n    });\n\n    balance.totalBalanceAvailable = Number(balance.totalBalanceAvailable);\n\n    \/\/ const bill = await this.http({\n    \/\/   url: this.fetchUrl.bill,\n    \/\/   headers: { Cookie: this.settings.cookie },\n    \/\/ });\n\n    \/\/ const billData = bill?.items?.[0] || { sumCharge: 0 };\n    \/\/ let total = Number(billData.sumCharge);\n    \/\/ if (balance.totalBalanceAvailable > total) {\n    \/\/   total = Math.ceil(total \/ balance.totalBalanceAvailable) * total;\n    \/\/ }\n    this.fee.number = balance.totalBalanceAvailable \/ 100;\n\n    this.settings.dataSource = {\n      fee: {\n        number: this.fee.number,\n      },\n      voice: {\n        number: this.voice.number,\n        percent: this.voice.percent,\n      },\n      flow: {\n        en: this.flow.en,\n        number: this.flow.number,\n        unit: this.flow.unit,\n        percent: this.flow.percent,\n      },\n    };\n    this.saveSettings(false);\n  };\n\n  async smallHeader(stack) {\n    const headerStack = stack.addStack();\n    headerStack.addSpacer();\n    const logo = headerStack.addImage(\n      await this.$request.get(this.logo, \"IMG\")\n    );\n    logo.imageSize = new Size(455 * this.logoScale, 125 * this.logoScale);\n    logo.tintColor = new Color('#2B83F1'); \/\/logo颜色\n    headerStack.addSpacer();\n    stack.addSpacer();\n\n    const feeStack = stack.addStack();\n    feeStack.centerAlignContent();\n    feeStack.addSpacer();\n    const feeValue = feeStack.addText(\"¥\" + `${this.fee.number}`);\n    feeValue.font = Font.mediumRoundedSystemFont(this.feeTextSize);\n    feeValue.textColor = this.widgetColor;\n    feeStack.addSpacer();\n    stack.addSpacer();\n  }\n\n  textLayout(stack, data) {\n    const rowStack = stack.addStack();\n    rowStack.centerAlignContent();\n    const icon = SFSymbol.named(data.icon);\n    icon.applyHeavyWeight();\n    let iconElement = rowStack.addImage(icon.image);\n    iconElement.imageSize = new Size(this.textSize, this.textSize);\n    iconElement.tintColor = data.iconColor;\n    rowStack.addSpacer(4);\n    let title = rowStack.addText(data.title);\n    rowStack.addSpacer();\n    let number = rowStack.addText(data.number + data.unit);\n    [title, number].map((t) => (t.textColor = this.widgetColor));\n    [title, number].map((t) => (t.font = Font.systemFont(this.textSize)));\n  }\n\n  async mediumCell(canvas, stack, data, color, fee = false, percent) {\n    const bg = new LinearGradient();\n    bg.locations = [0, 1];\n    bg.colors = [new Color(color, 0.03), new Color(color, 0.1)];\n    const dataStack = stack.addStack();\n    dataStack.backgroundGradient = bg;\n    dataStack.cornerRadius = 20;\n    dataStack.layoutVertically();\n    dataStack.addSpacer();\n\n    const topStack = dataStack.addStack();\n    topStack.addSpacer();\n    await this.imageCell(canvas, topStack, data, fee, percent);\n    topStack.addSpacer();\n\n    if (fee) {\n      dataStack.addSpacer(10);\n      const updateStack = dataStack.addStack();\n      updateStack.addSpacer();\n      updateStack.centerAlignContent();\n      const updataIcon = SFSymbol.named(\"arrow.2.circlepath\");\n      updataIcon.applyHeavyWeight();\n      const updateImg = updateStack.addImage(updataIcon.image);\n      updateImg.tintColor = new Color(color, 0.6);\n      updateImg.imageSize = new Size(10, 10);\n      updateStack.addSpacer(3);\n      const updateText = updateStack.addText(\n        `${this.arrUpdateTime[2]}:${this.arrUpdateTime[3]}`\n      );\n      updateText.font = Font.mediumSystemFont(10);\n      updateText.textColor = new Color(color, 0.6);\n      updateStack.addSpacer();\n    }\n\n    dataStack.addSpacer();\n\n    const numberStack = dataStack.addStack();\n    numberStack.addSpacer();\n    const number = numberStack.addText(`${data.number} ${data.en}`);\n    number.font = Font.semiboldSystemFont(15);\n    numberStack.addSpacer();\n\n    dataStack.addSpacer(3);\n\n    const titleStack = dataStack.addStack();\n    titleStack.addSpacer();\n    const title = titleStack.addText(data.title);\n    title.font = Font.mediumSystemFont(11);\n    title.textOpacity = 0.7;\n    titleStack.addSpacer();\n\n    dataStack.addSpacer(15);\n    [title, number].map((t) => (t.textColor = new Color(color)));\n  }\n\n  async imageCell(canvas, stack, data, fee, percent) {\n    const canvaStack = stack.addStack();\n    canvaStack.layoutVertically();\n    if (!fee) {\n      this.drawArc(canvas, data.percent * 3.6, data.FGColor, data.BGColor);\n      canvaStack.size = new Size(this.ringStackSize, this.ringStackSize);\n      canvaStack.backgroundImage = canvas.getImage();\n      this.ringContent(canvaStack, data, percent);\n    } else {\n      canvaStack.addSpacer(10);\n      const smallLogo = await this.$request.get(this.smallLogo, \"IMG\");\n      const logoStack = canvaStack.addStack();\n      logoStack.size = new Size(30, 30);\n      logoStack.backgroundImage = smallLogo;\n    }\n  }\n\n  ringContent(stack, data, percent = false) {\n    const rowIcon = stack.addStack();\n    rowIcon.addSpacer();\n    const icon = SFSymbol.named(data.icon);\n    icon.applyHeavyWeight();\n    const iconElement = rowIcon.addImage(icon.image);\n    iconElement.tintColor = this.gradient\n      ? new Color(data.colors[1])\n      : data.FGColor;\n    iconElement.imageSize = new Size(12, 12);\n    iconElement.imageOpacity = 0.7;\n    rowIcon.addSpacer();\n\n    stack.addSpacer(1);\n\n    const rowNumber = stack.addStack();\n    rowNumber.addSpacer();\n    const number = rowNumber.addText(\n      percent ? `${data.percent}` : `${data.number}`\n    );\n    number.font = percent\n      ? Font.systemFont(this.ringTextSize - 2)\n      : Font.mediumSystemFont(this.ringTextSize);\n    rowNumber.addSpacer();\n\n    const rowUnit = stack.addStack();\n    rowUnit.addSpacer();\n    const unit = rowUnit.addText(percent ? \"%\" : data.unit);\n    unit.font = Font.boldSystemFont(8);\n    unit.textOpacity = 0.5;\n    rowUnit.addSpacer();\n\n    if (percent) {\n      if (this.gradient) {\n        [unit, number].map((t) => (t.textColor = new Color(data.colors[1])));\n      } else {\n        [unit, number].map((t) => (t.textColor = data.FGColor));\n      }\n    } else {\n      [unit, number].map((t) => (t.textColor = this.widgetColor));\n    }\n  }\n\n  makeCanvas() {\n    const canvas = new DrawContext();\n    canvas.opaque = false;\n    canvas.respectScreenScale = true;\n    canvas.size = new Size(this.canvSize, this.canvSize);\n    return canvas;\n  }\n\n  sinDeg(deg) {\n    return Math.sin((deg * Math.PI) \/ 180);\n  }\n\n  cosDeg(deg) {\n    return Math.cos((deg * Math.PI) \/ 180);\n  }\n\n  drawArc(canvas, deg, fillColor, strokeColor) {\n    let ctr = new Point(this.canvSize \/ 2, this.canvSize \/ 2);\n    let bgx = ctr.x - this.canvRadius;\n    let bgy = ctr.y - this.canvRadius;\n    let bgd = 2 * this.canvRadius;\n    let bgr = new Rect(bgx, bgy, bgd, bgd);\n\n    canvas.setStrokeColor(strokeColor);\n    canvas.setLineWidth(this.canvWidth);\n    canvas.strokeEllipse(bgr);\n\n    for (let t = 0; t < deg; t++) {\n      let rect_x =\n        ctr.x + this.canvRadius * this.sinDeg(t) - this.canvWidth \/ 2;\n      let rect_y =\n        ctr.y - this.canvRadius * this.cosDeg(t) - this.canvWidth \/ 2;\n      let rect_r = new Rect(rect_x, rect_y, this.canvWidth, this.canvWidth);\n\n      canvas.setFillColor(this.gradient ? new Color(fillColor[t]) : fillColor);\n      canvas.setStrokeColor(strokeColor);\n      canvas.fillEllipse(rect_r);\n    }\n  }\n\n  arrColor() {\n    let colorArr = [\n      [\"#FFF000\", \"#E62490\"],\n      [\"#FDEB71\", \"#F8D800\"],\n      [\"#ABDCFF\", \"#0396FF\"],\n      [\"#FEB692\", \"#EA5455\"],\n      [\"#FEB692\", \"#EA5455\"],\n      [\"#CE9FFC\", \"#7367F0\"],\n      [\"#90F7EC\", \"#32CCBC\"],\n      [\"#FFF6B7\", \"#F6416C\"],\n      [\"#E2B0FF\", \"#9F44D3\"],\n      [\"#F97794\", \"#F072B6\"],\n      [\"#FCCF31\", \"#F55555\"],\n      [\"#5EFCE8\", \"#736EFE\"],\n      [\"#FAD7A1\", \"#E96D71\"],\n      [\"#FFFF1C\", \"#00C3FF\"],\n      [\"#FEC163\", \"#DE4313\"],\n      [\"#F6CEEC\", \"#D939CD\"],\n      [\"#FDD819\", \"#E80505\"],\n      [\"#FFF3B0\", \"#CA26FF\"],\n      [\"#2AFADF\", \"#4C83FF\"],\n      [\"#EECDA3\", \"#EF629F\"],\n      [\"#C2E59C\", \"#64B3F4\"],\n      [\"#FFF886\", \"#F072B6\"],\n      [\"#F5CBFF\", \"#C346C2\"],\n      [\"#FFF720\", \"#3CD500\"],\n      [\"#EE9AE5\", \"#5961F9\"],\n      [\"#FFC371\", \"#FF5F6D\"],\n      [\"#FFD3A5\", \"#FD6585\"],\n      [\"#C2FFD8\", \"#465EFB\"],\n      [\"#FFC600\", \"#FD6E6A\"],\n      [\"#FFC600\", \"#FD6E6A\"],\n      [\"#92FE9D\", \"#00C9FF\"],\n      [\"#FFDDE1\", \"#EE9CA7\"],\n      [\"#F0FF00\", \"#58CFFB\"],\n      [\"#FFE985\", \"#FA742B\"],\n      [\"#72EDF2\", \"#5151E5\"],\n      [\"#F6D242\", \"#FF52E5\"],\n      [\"#F9D423\", \"#FF4E50\"],\n      [\"#3C8CE7\", \"#00EAFF\"],\n      [\"#FCFF00\", \"#FFA8A8\"],\n      [\"#FF96F9\", \"#C32BAC\"],\n      [\"#D0E6A5\", \"#FFDD94\"],\n      [\"#FFDD94\", \"#FA897B\"],\n      [\"#FFCC4B\", \"#FF7D58\"],\n      [\"#D0E6A5\", \"#86E3CE\"],\n      [\"#F0D5B6\", \"#F16238\"],\n      [\"#F8EC70\", \"#F9C708\"],\n      [\"#C4E86B\", \"#00BCB4\"],\n      [\"#FFC446\", \"#FA0874\"],\n      [\"#E1EE32\", \"#FFB547\"],\n      [\"#FFD804\", \"#2ACCC8\"],\n      [\"#E9A6D2\", \"#E9037B\"],\n      [\"#F8EC70\", \"#49E2F6\"],\n      [\"#A2F8CD\", \"#A2F852\"],\n      [\"#49E2F6\", \"#A2F8CD\"],\n      [\"#FDEFE2\", \"#FE214F\"],\n      [\"#F8EC70\", \"#A2F8CD\"],\n      [\"#F8EC70\", \"#49E2F6\"],\n      [\"#B7FFE4\", \"#E4B7FF\"],\n      [\"#FFB7D1\", \"#E4B7FF\"],\n      [\"#D0E6A5\", \"#86E3CE\"],\n      [\"#E8E965\", \"#64C5C7\"],\n    ];\n    let colors = colorArr[Math.floor(Math.random() * colorArr.length)];\n    return colors;\n  }\n\n  gradientColor(colors, step) {\n    var startRGB = this.colorToRgb(colors[0]),\n      startR = startRGB[0],\n      startG = startRGB[1],\n      startB = startRGB[2];\n\n    var endRGB = this.colorToRgb(colors[1]),\n      endR = endRGB[0],\n      endG = endRGB[1],\n      endB = endRGB[2];\n\n    var sR = (endR - startR) \/ step,\n      sG = (endG - startG) \/ step,\n      sB = (endB - startB) \/ step;\n\n    var colorArr = [];\n    for (var i = 0; i < step; i++) {\n      var hex = this.colorToHex(\n        \"rgb(\" +\n          parseInt(sR * i + startR) +\n          \",\" +\n          parseInt(sG * i + startG) +\n          \",\" +\n          parseInt(sB * i + startB) +\n          \")\"\n      );\n      colorArr.push(hex);\n    }\n    return colorArr;\n  }\n\n  colorToRgb(sColor) {\n    var reg = \/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$\/;\n    var sColor = sColor.toLowerCase();\n    if (sColor && reg.test(sColor)) {\n      if (sColor.length === 4) {\n        var sColorNew = \"#\";\n        for (var i = 1; i < 4; i += 1) {\n          sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\n        }\n        sColor = sColorNew;\n      }\n      var sColorChange = [];\n      for (var i = 1; i < 7; i += 2) {\n        sColorChange.push(parseInt(\"0x\" + sColor.slice(i, i + 2)));\n      }\n      return sColorChange;\n    } else {\n      return sColor;\n    }\n  }\n\n  colorToHex(rgb) {\n    var _this = rgb;\n    var reg = \/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$\/;\n    if (\/^(rgb|RGB)\/.test(_this)) {\n      var aColor = _this.replace(\/(?:\\(|\\)|rgb|RGB)*\/g, \"\").split(\",\");\n      var strHex = \"#\";\n      for (var i = 0; i < aColor.length; i++) {\n        var hex = Number(aColor[i]).toString(16);\n        hex = hex.length < 2 ? 0 + \"\" + hex : hex;\n        if (hex === \"0\") {\n          hex += hex;\n        }\n        strHex += hex;\n      }\n      if (strHex.length !== 7) {\n        strHex = _this;\n      }\n\n      return strHex;\n    } else if (reg.test(_this)) {\n      var aNum = _this.replace(\/#\/, \"\").split(\"\");\n      if (aNum.length === 6) {\n        return _this;\n      } else if (aNum.length === 3) {\n        var numHex = \"#\";\n        for (var i = 0; i < aNum.length; i += 1) {\n          numHex += aNum[i] + aNum[i];\n        }\n        return numHex;\n      }\n    } else {\n      return _this;\n    }\n  }\n\n  renderSmall = async (w) => {\n    w.setPadding(\n      this.smallPadding,\n      this.smallPadding,\n      this.smallPadding,\n      this.smallPadding\n    );\n    await this.smallHeader(w);\n    const bodyStack = w.addStack();\n    bodyStack.layoutVertically();\n    if (this.widgetParam == \"1\") {\n      this.textLayout(bodyStack, this.flow);\n      bodyStack.addSpacer(7);\n      this.textLayout(bodyStack, this.voice);\n      bodyStack.addSpacer(7);\n      this.textLayout(bodyStack, this.point);\n    } else {\n      const canvas = this.makeCanvas();\n      const ringStack = bodyStack.addStack();\n      this.imageCell(canvas, ringStack, this.flow);\n      ringStack.addSpacer();\n      this.imageCell(canvas, ringStack, this.voice);\n    }\n    return w;\n  };\n\n  renderMedium = async (w) => {\n    w.setPadding(this.padding, this.padding, this.padding, this.padding);\n    const canvas = this.makeCanvas();\n    const bodyStack = w.addStack();\n    await this.mediumCell(canvas, bodyStack, this.fee, \"0A4B9D\", true);\n    bodyStack.addSpacer(this.padding);\n    await this.mediumCell(\n      canvas,\n      bodyStack,\n      this.flow,\n      this.flowColorHex,\n      false,\n      true\n    );\n    bodyStack.addSpacer(this.padding);\n    await this.mediumCell(\n      canvas,\n      bodyStack,\n      this.voice,\n      this.voiceColorHex,\n      false,\n      true\n    );\n    return w;\n  };\n\n  renderLarge = async (w) => {\n    w.addText(\"暂不支持\");\n    return w;\n  };\n\n  renderWebView = async () => {\n    const webView = new WebView();\n    const url = this.fetchUrl.login;\n    await webView.loadURL(url);\n    await webView.present(false);\n  };\n\n  Run() {\n    if (config.runsInApp) {\n      const widgetInitConfig = {\n        china_telecom_url: \"@yy_10000.china_telecom_loginUrl\",\n      };\n      this.registerAction(\n        \"颜色配置\",\n        async () => {\n          await this.setAlertInput(\n            `${this.name}颜色配置`,\n            \"进度条颜色|底圈颜色\\n底圈颜色留空将跟随进度条颜色并淡显\",\n            {\n              gradient: \"是否开启渐变进度条，缺省：false\",\n              step1: \"流量进度条颜色\",\n              step2: \"语音进度条颜色\",\n              inner1: \"流量进度条底圈颜色\",\n              inner2: \"语音进度条底圈颜色\",\n            }\n          );\n        },\n        \"https:\/\/pic1.imgdb.cn\/item\/63315c1e16f2c2beb1a27363.png\"\n      );\n\n      this.registerAction(\n        \"尺寸设置\",\n        async () => {\n          await this.setAlertInput(\n            `${this.name}尺寸设置`,\n            \"进度条大小|文字大小\",\n            {\n              logoScale: \"小组件logo缩放，缺省：0.24\",\n              ringStackSize: \"圆环大小，缺省：61\",\n              ringTextSize: \"圆环中心文字大小，缺省：14\",\n              feeTextSize: \"话费文字大小，缺省：21\",\n              textSize: \"文字模式下文字大小，缺省：13\",\n              smallPadding: \"小尺寸组件边距，缺省：16\",\n              padding: \"中尺寸组件边距，缺省：10\",\n            }\n          );\n        },\n        \"https:\/\/pic1.imgdb.cn\/item\/63315c2c16f2c2beb1a28726.png\"\n      );\n\n      this.registerAction(\n        \"流量设置\",\n        async () => {\n          await this.setAlertInput(\n            `${this.name}流量设置`,\n            \"是否显示已用流量\\n不限量或伪不限量用户可将此值设为true\",\n            {\n              usedFlow: \"是否显示已用流量，缺省：false\",\n              maxFlow: \"实际流量或超限流量(GB)，缺省：40\",\n            }\n          );\n        },\n        \"https:\/\/pic1.imgdb.cn\/item\/63315c2216f2c2beb1a27888.png\"\n      );\n\n      this.registerAction(\n        \"网站登录\",\n        this.renderWebView,\n        \"https:\/\/raw.githubusercontent.com\/githubdulong\/Script\/master\/Images\/account.png\"\n      );\n\n      this.registerAction(\n        \"登录地址\",\n        async () => {\n          const index = await this.generateAlert(\"设置账号信息\", [\n            \"BoxJS\",\n            \"手动输入\",\n          ]);\n          if (index === 0) {\n            await this.setCacheBoxJSData(widgetInitConfig);\n          } else {\n            await this.setAlertInput(\"登录地址\", \"中国电信\", widgetInitConfig);\n          }\n        },\n        \"https:\/\/raw.githubusercontent.com\/githubdulong\/Script\/master\/Images\/boxjs.png\"\n      );\n\n      this.registerAction(\n        \"基础设置\",\n        this.setWidgetConfig,\n        \"https:\/\/raw.githubusercontent.com\/githubdulong\/Script\/master\/Images\/preferences.png\"\n      );\n    }\n\n    try {\n      const {\n        step1,\n        step2,\n        inner1,\n        inner2,\n        logoScale,\n        ringStackSize,\n        ringTextSize,\n        feeTextSize,\n        textSize,\n        smallPadding,\n        padding,\n        gradient,\n        usedFlow,\n        maxFlow,\n      } = this.settings;\n\n      this.gradient = gradient === \"true\" ? true : this.gradient;\n      this.usedFlow = usedFlow === \"true\" ? true : this.usedFlow;\n      this.flowColorHex = step1 ? step1 : this.flowColorHex;\n      this.voiceColorHex = step2 ? step2 : this.voiceColorHex;\n      this.flow.BGColor = inner1\n        ? new Color(inner1)\n        : new Color(this.flowColorHex, 0.2);\n      this.voice.BGColor = inner2\n        ? new Color(inner2)\n        : new Color(this.voiceColorHex, 0.2);\n      this.flow.FGColor = new Color(this.flowColorHex);\n      this.voice.FGColor = new Color(this.voiceColorHex);\n\n      this.flow.max = maxFlow ? parseFloat(maxFlow) : this.flow.max;\n      this.logoScale = logoScale ? parseFloat(logoScale) : this.logoScale;\n      this.ringStackSize = ringStackSize\n        ? parseFloat(ringStackSize)\n        : this.ringStackSize;\n      this.ringTextSize = ringTextSize\n        ? parseFloat(ringTextSize)\n        : this.ringTextSize;\n      this.feeTextSize = feeTextSize\n        ? parseFloat(feeTextSize)\n        : this.feeTextSize;\n      this.textSize = textSize ? parseFloat(textSize) : this.textSize;\n      this.smallPadding = smallPadding\n        ? parseFloat(smallPadding)\n        : this.smallPadding;\n      this.padding = padding ? parseFloat(padding) : this.padding;\n\n      if (this.gradient) {\n        this.flow.colors = this.arrColor();\n        this.voice.colors = this.arrColor();\n        this.flow.BGColor = inner1\n          ? new Color(inner1)\n          : new Color(this.flow.colors[1], 0.2);\n        this.voice.BGColor = inner2\n          ? new Color(inner2)\n          : new Color(this.voice.colors[1], 0.2);\n        this.flow.FGColor = this.gradientColor(this.flow.colors, 360);\n        this.voice.FGColor = this.gradientColor(this.voice.colors, 360);\n        this.flowColorHex = this.flow.colors[1];\n        this.voiceColorHex = this.voice.colors[1];\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async render() {\n    await this.init();\n    const widget = new ListWidget();\n    await this.getWidgetBackgroundImage(widget);\n    if (this.widgetFamily === \"medium\") {\n      return await this.renderMedium(widget);\n    } else if (this.widgetFamily === \"large\") {\n      return await this.renderLarge(widget);\n    } else {\n      return await this.renderSmall(widget);\n    }\n  }\n}\n\nawait Runing(Widget, args.widgetParameter, false);\n\n\/\/version:1.1.0\n",
  "share_sheet_inputs" : [

  ]
}