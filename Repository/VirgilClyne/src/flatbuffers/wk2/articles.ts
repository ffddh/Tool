// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Articles {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Articles {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsArticles(bb:flatbuffers.ByteBuffer, obj?:Articles):Articles {
  return (obj || new Articles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsArticles(bb:flatbuffers.ByteBuffer, obj?:Articles):Articles {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Articles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

supportedStorefronts(index: number):string
supportedStorefronts(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
supportedStorefronts(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

supportedStorefrontsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

alertIds(index: number):string
alertIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alertIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alertIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

phenomena(index: number):string
phenomena(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
phenomena(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

phenomenaLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

headlineOverride():string|null
headlineOverride(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
headlineOverride(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

locale():string|null
locale(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locale(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startArticles(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addSupportedStorefronts(builder:flatbuffers.Builder, supportedStorefrontsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, supportedStorefrontsOffset, 0);
}

static createSupportedStorefrontsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSupportedStorefrontsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAlertIds(builder:flatbuffers.Builder, alertIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, alertIdsOffset, 0);
}

static createAlertIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlertIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPhenomena(builder:flatbuffers.Builder, phenomenaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, phenomenaOffset, 0);
}

static createPhenomenaVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPhenomenaVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHeadlineOverride(builder:flatbuffers.Builder, headlineOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, headlineOverrideOffset, 0);
}

static addLocale(builder:flatbuffers.Builder, localeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, localeOffset, 0);
}

static endArticles(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createArticles(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, supportedStorefrontsOffset:flatbuffers.Offset, alertIdsOffset:flatbuffers.Offset, phenomenaOffset:flatbuffers.Offset, headlineOverrideOffset:flatbuffers.Offset, localeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Articles.startArticles(builder);
  Articles.addId(builder, idOffset);
  Articles.addSupportedStorefronts(builder, supportedStorefrontsOffset);
  Articles.addAlertIds(builder, alertIdsOffset);
  Articles.addPhenomena(builder, phenomenaOffset);
  Articles.addHeadlineOverride(builder, headlineOverrideOffset);
  Articles.addLocale(builder, localeOffset);
  return Articles.endArticles(builder);
}
}
