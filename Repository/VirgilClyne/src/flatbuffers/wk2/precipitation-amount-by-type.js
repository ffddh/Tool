// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { PrecipitationType } from '../wk2/precipitation-type.js';
export class PrecipitationAmountByType {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPrecipitationAmountByType(bb, obj) {
        return (obj || new PrecipitationAmountByType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPrecipitationAmountByType(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PrecipitationAmountByType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    precipitationType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PrecipitationType.CLEAR;
    }
    expected() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    minimumSnow() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    maximumSnow() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    expectedSnow() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startPrecipitationAmountByType(builder) {
        builder.startObject(5);
    }
    static addPrecipitationType(builder, precipitationType) {
        builder.addFieldInt8(0, precipitationType, PrecipitationType.CLEAR);
    }
    static addExpected(builder, expected) {
        builder.addFieldFloat32(1, expected, 0.0);
    }
    static addMinimumSnow(builder, minimumSnow) {
        builder.addFieldFloat32(2, minimumSnow, 0.0);
    }
    static addMaximumSnow(builder, maximumSnow) {
        builder.addFieldFloat32(3, maximumSnow, 0.0);
    }
    static addExpectedSnow(builder, expectedSnow) {
        builder.addFieldFloat32(4, expectedSnow, 0.0);
    }
    static endPrecipitationAmountByType(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPrecipitationAmountByType(builder, precipitationType, expected, minimumSnow, maximumSnow, expectedSnow) {
        PrecipitationAmountByType.startPrecipitationAmountByType(builder);
        PrecipitationAmountByType.addPrecipitationType(builder, precipitationType);
        PrecipitationAmountByType.addExpected(builder, expected);
        PrecipitationAmountByType.addMinimumSnow(builder, minimumSnow);
        PrecipitationAmountByType.addMaximumSnow(builder, maximumSnow);
        PrecipitationAmountByType.addExpectedSnow(builder, expectedSnow);
        return PrecipitationAmountByType.endPrecipitationAmountByType(builder);
    }
}
