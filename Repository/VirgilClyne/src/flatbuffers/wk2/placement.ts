// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Articles } from '../wk2/articles.js';
import { PlacementType } from '../wk2/placement-type.js';


export class Placement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Placement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlacement(bb:flatbuffers.ByteBuffer, obj?:Placement):Placement {
  return (obj || new Placement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlacement(bb:flatbuffers.ByteBuffer, obj?:Placement):Placement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Placement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

articles(index: number, obj?:Articles):Articles|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Articles()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

articlesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

placement():PlacementType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PlacementType.UNKNOWN0;
}

static startPlacement(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt8(0, priority, 0);
}

static addArticles(builder:flatbuffers.Builder, articlesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, articlesOffset, 0);
}

static createArticlesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startArticlesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPlacement(builder:flatbuffers.Builder, placement:PlacementType) {
  builder.addFieldInt8(2, placement, PlacementType.UNKNOWN0);
}

static endPlacement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlacement(builder:flatbuffers.Builder, priority:number, articlesOffset:flatbuffers.Offset, placement:PlacementType):flatbuffers.Offset {
  Placement.startPlacement(builder);
  Placement.addPriority(builder, priority);
  Placement.addArticles(builder, articlesOffset);
  Placement.addPlacement(builder, placement);
  return Placement.endPlacement(builder);
}
}
