// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Direction } from '../wk2/direction.js';


export class Change {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Change {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChange(bb:flatbuffers.ByteBuffer, obj?:Change):Change {
  return (obj || new Change()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChange(bb:flatbuffers.ByteBuffer, obj?:Change):Change {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Change()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

forecastStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

forecastEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

maxTemperatureChange():Direction {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Direction.STEADY;
}

minTemperatureChange():Direction {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Direction.STEADY;
}

dayPrecipitationChange():Direction {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Direction.STEADY;
}

nightPrecipitationChange():Direction {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Direction.STEADY;
}

static startChange(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addForecastStart(builder:flatbuffers.Builder, forecastStart:number) {
  builder.addFieldInt32(0, forecastStart, 0);
}

static addForecastEnd(builder:flatbuffers.Builder, forecastEnd:number) {
  builder.addFieldInt32(1, forecastEnd, 0);
}

static addMaxTemperatureChange(builder:flatbuffers.Builder, maxTemperatureChange:Direction) {
  builder.addFieldInt8(2, maxTemperatureChange, Direction.STEADY);
}

static addMinTemperatureChange(builder:flatbuffers.Builder, minTemperatureChange:Direction) {
  builder.addFieldInt8(3, minTemperatureChange, Direction.STEADY);
}

static addDayPrecipitationChange(builder:flatbuffers.Builder, dayPrecipitationChange:Direction) {
  builder.addFieldInt8(4, dayPrecipitationChange, Direction.STEADY);
}

static addNightPrecipitationChange(builder:flatbuffers.Builder, nightPrecipitationChange:Direction) {
  builder.addFieldInt8(5, nightPrecipitationChange, Direction.STEADY);
}

static endChange(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChange(builder:flatbuffers.Builder, forecastStart:number, forecastEnd:number, maxTemperatureChange:Direction, minTemperatureChange:Direction, dayPrecipitationChange:Direction, nightPrecipitationChange:Direction):flatbuffers.Offset {
  Change.startChange(builder);
  Change.addForecastStart(builder, forecastStart);
  Change.addForecastEnd(builder, forecastEnd);
  Change.addMaxTemperatureChange(builder, maxTemperatureChange);
  Change.addMinTemperatureChange(builder, minTemperatureChange);
  Change.addDayPrecipitationChange(builder, dayPrecipitationChange);
  Change.addNightPrecipitationChange(builder, nightPrecipitationChange);
  return Change.endChange(builder);
}
}
