// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Direction } from '../wk2/direction.js';
export class Change {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsChange(bb, obj) {
        return (obj || new Change()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsChange(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Change()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    forecastStart() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    forecastEnd() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    maxTemperatureChange() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Direction.STEADY;
    }
    minTemperatureChange() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Direction.STEADY;
    }
    dayPrecipitationChange() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Direction.STEADY;
    }
    nightPrecipitationChange() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Direction.STEADY;
    }
    static startChange(builder) {
        builder.startObject(6);
    }
    static addForecastStart(builder, forecastStart) {
        builder.addFieldInt32(0, forecastStart, 0);
    }
    static addForecastEnd(builder, forecastEnd) {
        builder.addFieldInt32(1, forecastEnd, 0);
    }
    static addMaxTemperatureChange(builder, maxTemperatureChange) {
        builder.addFieldInt8(2, maxTemperatureChange, Direction.STEADY);
    }
    static addMinTemperatureChange(builder, minTemperatureChange) {
        builder.addFieldInt8(3, minTemperatureChange, Direction.STEADY);
    }
    static addDayPrecipitationChange(builder, dayPrecipitationChange) {
        builder.addFieldInt8(4, dayPrecipitationChange, Direction.STEADY);
    }
    static addNightPrecipitationChange(builder, nightPrecipitationChange) {
        builder.addFieldInt8(5, nightPrecipitationChange, Direction.STEADY);
    }
    static endChange(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createChange(builder, forecastStart, forecastEnd, maxTemperatureChange, minTemperatureChange, dayPrecipitationChange, nightPrecipitationChange) {
        Change.startChange(builder);
        Change.addForecastStart(builder, forecastStart);
        Change.addForecastEnd(builder, forecastEnd);
        Change.addMaxTemperatureChange(builder, maxTemperatureChange);
        Change.addMinTemperatureChange(builder, minTemperatureChange);
        Change.addDayPrecipitationChange(builder, dayPrecipitationChange);
        Change.addNightPrecipitationChange(builder, nightPrecipitationChange);
        return Change.endChange(builder);
    }
}
