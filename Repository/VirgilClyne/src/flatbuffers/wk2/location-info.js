// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Metadata } from '../wk2/metadata.js';
export class LocationInfo {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsLocationInfo(bb, obj) {
        return (obj || new LocationInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsLocationInfo(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LocationInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    metadata(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Metadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    preciseName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    countryCode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timeZone(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    primaryName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startLocationInfo(builder) {
        builder.startObject(5);
    }
    static addMetadata(builder, metadataOffset) {
        builder.addFieldOffset(0, metadataOffset, 0);
    }
    static addPreciseName(builder, preciseNameOffset) {
        builder.addFieldOffset(1, preciseNameOffset, 0);
    }
    static addCountryCode(builder, countryCodeOffset) {
        builder.addFieldOffset(2, countryCodeOffset, 0);
    }
    static addTimeZone(builder, timeZoneOffset) {
        builder.addFieldOffset(3, timeZoneOffset, 0);
    }
    static addPrimaryName(builder, primaryNameOffset) {
        builder.addFieldOffset(4, primaryNameOffset, 0);
    }
    static endLocationInfo(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createLocationInfo(builder, metadataOffset, preciseNameOffset, countryCodeOffset, timeZoneOffset, primaryNameOffset) {
        LocationInfo.startLocationInfo(builder);
        LocationInfo.addMetadata(builder, metadataOffset);
        LocationInfo.addPreciseName(builder, preciseNameOffset);
        LocationInfo.addCountryCode(builder, countryCodeOffset);
        LocationInfo.addTimeZone(builder, timeZoneOffset);
        LocationInfo.addPrimaryName(builder, primaryNameOffset);
        return LocationInfo.endLocationInfo(builder);
    }
}
