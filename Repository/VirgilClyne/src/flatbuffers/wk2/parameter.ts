// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ParameterType } from '../wk2/parameter-type.js';


export class Parameter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Parameter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParameter(bb:flatbuffers.ByteBuffer, obj?:Parameter):Parameter {
  return (obj || new Parameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParameter(bb:flatbuffers.ByteBuffer, obj?:Parameter):Parameter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Parameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():ParameterType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ParameterType.FIRST_AT;
}

date():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startParameter(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:ParameterType) {
  builder.addFieldInt8(0, type, ParameterType.FIRST_AT);
}

static addDate(builder:flatbuffers.Builder, date:number) {
  builder.addFieldInt32(1, date, 0);
}

static endParameter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createParameter(builder:flatbuffers.Builder, type:ParameterType, date:number):flatbuffers.Offset {
  Parameter.startParameter(builder);
  Parameter.addType(builder, type);
  Parameter.addDate(builder, date);
  return Parameter.endParameter(builder);
}
}
