// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { PollutantType } from '../wk2/pollutant-type.js';
import { UnitType } from '../wk2/unit-type.js';
export class Pollutant {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPollutant(bb, obj) {
        return (obj || new Pollutant()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPollutant(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Pollutant()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    pollutantType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PollutantType.NOT_AVAILABLE;
    }
    amount() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    units() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : UnitType.PARTS_PER_BILLION;
    }
    static startPollutant(builder) {
        builder.startObject(3);
    }
    static addPollutantType(builder, pollutantType) {
        builder.addFieldInt8(0, pollutantType, PollutantType.NOT_AVAILABLE);
    }
    static addAmount(builder, amount) {
        builder.addFieldFloat32(1, amount, 0.0);
    }
    static addUnits(builder, units) {
        builder.addFieldInt8(2, units, UnitType.PARTS_PER_BILLION);
    }
    static endPollutant(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPollutant(builder, pollutantType, amount, units) {
        Pollutant.startPollutant(builder);
        Pollutant.addPollutantType(builder, pollutantType);
        Pollutant.addAmount(builder, amount);
        Pollutant.addUnits(builder, units);
        return Pollutant.endPollutant(builder);
    }
}
