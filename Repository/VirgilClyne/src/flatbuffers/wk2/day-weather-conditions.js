// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { DayPartForecast } from '../wk2/day-part-forecast.js';
import { MoonPhase } from '../wk2/moon-phase.js';
import { PrecipitationAmountByType } from '../wk2/precipitation-amount-by-type.js';
import { PrecipitationType } from '../wk2/precipitation-type.js';
import { WeatherCondition } from '../wk2/weather-condition.js';
export class DayWeatherConditions {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDayWeatherConditions(bb, obj) {
        return (obj || new DayWeatherConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDayWeatherConditions(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DayWeatherConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    forecastStart() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    forecastEnd() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    conditionCode() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : WeatherCondition.CLEAR;
    }
    humidityMax() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    humidityMin() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    maxUvIndex() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    moonPhase() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : MoonPhase.NEW;
    }
    moonrise() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    moonset() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    precipitationAmount() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    precipitationAmountByType(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new PrecipitationAmountByType()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    precipitationAmountByTypeLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    precipitationChance() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    precipitationType() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PrecipitationType.CLEAR;
    }
    snowfallAmount() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    solarMidnight() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    solarNoon() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunrise() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunriseCivil() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunriseNautical() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunriseAstronomical() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunset() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunsetCivil() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunsetNautical() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    sunsetAstronomical() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    temperatureMax() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperatureMaxTime() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    temperatureMin() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperatureMinTime() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    windGustSpeedMax() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windSpeedAvg() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windSpeedMax() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    visibilityMax() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    visibilityMin() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    daytimeForecast(obj) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? (obj || new DayPartForecast()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    overnightForecast(obj) {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? (obj || new DayPartForecast()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    restOfDayForecast(obj) {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? (obj || new DayPartForecast()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startDayWeatherConditions(builder) {
        builder.startObject(36);
    }
    static addForecastStart(builder, forecastStart) {
        builder.addFieldInt32(0, forecastStart, 0);
    }
    static addForecastEnd(builder, forecastEnd) {
        builder.addFieldInt32(1, forecastEnd, 0);
    }
    static addConditionCode(builder, conditionCode) {
        builder.addFieldInt8(2, conditionCode, WeatherCondition.CLEAR);
    }
    static addHumidityMax(builder, humidityMax) {
        builder.addFieldInt8(3, humidityMax, 0);
    }
    static addHumidityMin(builder, humidityMin) {
        builder.addFieldInt8(4, humidityMin, 0);
    }
    static addMaxUvIndex(builder, maxUvIndex) {
        builder.addFieldInt8(5, maxUvIndex, 0);
    }
    static addMoonPhase(builder, moonPhase) {
        builder.addFieldInt8(6, moonPhase, MoonPhase.NEW);
    }
    static addMoonrise(builder, moonrise) {
        builder.addFieldInt32(7, moonrise, 0);
    }
    static addMoonset(builder, moonset) {
        builder.addFieldInt32(8, moonset, 0);
    }
    static addPrecipitationAmount(builder, precipitationAmount) {
        builder.addFieldFloat32(9, precipitationAmount, 0.0);
    }
    static addPrecipitationAmountByType(builder, precipitationAmountByTypeOffset) {
        builder.addFieldOffset(10, precipitationAmountByTypeOffset, 0);
    }
    static createPrecipitationAmountByTypeVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPrecipitationAmountByTypeVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPrecipitationChance(builder, precipitationChance) {
        builder.addFieldInt8(11, precipitationChance, 0);
    }
    static addPrecipitationType(builder, precipitationType) {
        builder.addFieldInt8(12, precipitationType, PrecipitationType.CLEAR);
    }
    static addSnowfallAmount(builder, snowfallAmount) {
        builder.addFieldFloat32(13, snowfallAmount, 0.0);
    }
    static addSolarMidnight(builder, solarMidnight) {
        builder.addFieldInt32(14, solarMidnight, 0);
    }
    static addSolarNoon(builder, solarNoon) {
        builder.addFieldInt32(15, solarNoon, 0);
    }
    static addSunrise(builder, sunrise) {
        builder.addFieldInt32(16, sunrise, 0);
    }
    static addSunriseCivil(builder, sunriseCivil) {
        builder.addFieldInt32(17, sunriseCivil, 0);
    }
    static addSunriseNautical(builder, sunriseNautical) {
        builder.addFieldInt32(18, sunriseNautical, 0);
    }
    static addSunriseAstronomical(builder, sunriseAstronomical) {
        builder.addFieldInt32(19, sunriseAstronomical, 0);
    }
    static addSunset(builder, sunset) {
        builder.addFieldInt32(20, sunset, 0);
    }
    static addSunsetCivil(builder, sunsetCivil) {
        builder.addFieldInt32(21, sunsetCivil, 0);
    }
    static addSunsetNautical(builder, sunsetNautical) {
        builder.addFieldInt32(22, sunsetNautical, 0);
    }
    static addSunsetAstronomical(builder, sunsetAstronomical) {
        builder.addFieldInt32(23, sunsetAstronomical, 0);
    }
    static addTemperatureMax(builder, temperatureMax) {
        builder.addFieldFloat32(24, temperatureMax, 0.0);
    }
    static addTemperatureMaxTime(builder, temperatureMaxTime) {
        builder.addFieldInt32(25, temperatureMaxTime, 0);
    }
    static addTemperatureMin(builder, temperatureMin) {
        builder.addFieldFloat32(26, temperatureMin, 0.0);
    }
    static addTemperatureMinTime(builder, temperatureMinTime) {
        builder.addFieldInt32(27, temperatureMinTime, 0);
    }
    static addWindGustSpeedMax(builder, windGustSpeedMax) {
        builder.addFieldFloat32(28, windGustSpeedMax, 0.0);
    }
    static addWindSpeedAvg(builder, windSpeedAvg) {
        builder.addFieldFloat32(29, windSpeedAvg, 0.0);
    }
    static addWindSpeedMax(builder, windSpeedMax) {
        builder.addFieldFloat32(30, windSpeedMax, 0.0);
    }
    static addVisibilityMax(builder, visibilityMax) {
        builder.addFieldFloat32(31, visibilityMax, 0.0);
    }
    static addVisibilityMin(builder, visibilityMin) {
        builder.addFieldFloat32(32, visibilityMin, 0.0);
    }
    static addDaytimeForecast(builder, daytimeForecastOffset) {
        builder.addFieldOffset(33, daytimeForecastOffset, 0);
    }
    static addOvernightForecast(builder, overnightForecastOffset) {
        builder.addFieldOffset(34, overnightForecastOffset, 0);
    }
    static addRestOfDayForecast(builder, restOfDayForecastOffset) {
        builder.addFieldOffset(35, restOfDayForecastOffset, 0);
    }
    static endDayWeatherConditions(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
