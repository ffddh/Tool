// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { PrecipitationType } from '../wk2/precipitation-type.js';
import { PressureTrend } from '../wk2/pressure-trend.js';
import { WeatherCondition } from '../wk2/weather-condition.js';
export class HourWeatherConditions {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsHourWeatherConditions(bb, obj) {
        return (obj || new HourWeatherConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsHourWeatherConditions(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HourWeatherConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    forecastStart() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    cloudCover() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    cloudCoverLowAltPct() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    cloudCoverMidAltPct() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    cloudCoverHighAltPct() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    conditionCode() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : WeatherCondition.CLEAR;
    }
    daylight() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    humidity() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    perceivedPrecipitationIntensity() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    precipitationAmount() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    precipitationIntensity() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    precipitationChance() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    precipitationType() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PrecipitationType.CLEAR;
    }
    pressure() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    pressureTrend() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PressureTrend.RISING;
    }
    snowfallAmount() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    snowfallIntensity() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperature() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperatureApparent() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    unknown20() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperatureDewPoint() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    uvIndex() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    visibility() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windDirection() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    windGust() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windSpeed() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startHourWeatherConditions(builder) {
        builder.startObject(26);
    }
    static addForecastStart(builder, forecastStart) {
        builder.addFieldInt32(0, forecastStart, 0);
    }
    static addCloudCover(builder, cloudCover) {
        builder.addFieldInt8(1, cloudCover, 0);
    }
    static addCloudCoverLowAltPct(builder, cloudCoverLowAltPct) {
        builder.addFieldInt8(2, cloudCoverLowAltPct, 0);
    }
    static addCloudCoverMidAltPct(builder, cloudCoverMidAltPct) {
        builder.addFieldInt8(3, cloudCoverMidAltPct, 0);
    }
    static addCloudCoverHighAltPct(builder, cloudCoverHighAltPct) {
        builder.addFieldInt8(4, cloudCoverHighAltPct, 0);
    }
    static addConditionCode(builder, conditionCode) {
        builder.addFieldInt8(5, conditionCode, WeatherCondition.CLEAR);
    }
    static addDaylight(builder, daylight) {
        builder.addFieldInt8(6, +daylight, +false);
    }
    static addHumidity(builder, humidity) {
        builder.addFieldInt8(7, humidity, 0);
    }
    static addPerceivedPrecipitationIntensity(builder, perceivedPrecipitationIntensity) {
        builder.addFieldFloat32(8, perceivedPrecipitationIntensity, 0.0);
    }
    static addPrecipitationAmount(builder, precipitationAmount) {
        builder.addFieldFloat32(9, precipitationAmount, 0.0);
    }
    static addPrecipitationIntensity(builder, precipitationIntensity) {
        builder.addFieldFloat32(10, precipitationIntensity, 0.0);
    }
    static addPrecipitationChance(builder, precipitationChance) {
        builder.addFieldInt8(11, precipitationChance, 0);
    }
    static addPrecipitationType(builder, precipitationType) {
        builder.addFieldInt8(12, precipitationType, PrecipitationType.CLEAR);
    }
    static addPressure(builder, pressure) {
        builder.addFieldFloat32(13, pressure, 0.0);
    }
    static addPressureTrend(builder, pressureTrend) {
        builder.addFieldInt8(14, pressureTrend, PressureTrend.RISING);
    }
    static addSnowfallAmount(builder, snowfallAmount) {
        builder.addFieldFloat32(15, snowfallAmount, 0.0);
    }
    static addSnowfallIntensity(builder, snowfallIntensity) {
        builder.addFieldFloat32(16, snowfallIntensity, 0.0);
    }
    static addTemperature(builder, temperature) {
        builder.addFieldFloat32(17, temperature, 0.0);
    }
    static addTemperatureApparent(builder, temperatureApparent) {
        builder.addFieldFloat32(18, temperatureApparent, 0.0);
    }
    static addUnknown20(builder, unknown20) {
        builder.addFieldFloat32(19, unknown20, 0.0);
    }
    static addTemperatureDewPoint(builder, temperatureDewPoint) {
        builder.addFieldFloat32(20, temperatureDewPoint, 0.0);
    }
    static addUvIndex(builder, uvIndex) {
        builder.addFieldInt8(21, uvIndex, 0);
    }
    static addVisibility(builder, visibility) {
        builder.addFieldFloat32(22, visibility, 0.0);
    }
    static addWindDirection(builder, windDirection) {
        builder.addFieldInt16(23, windDirection, 0);
    }
    static addWindGust(builder, windGust) {
        builder.addFieldFloat32(24, windGust, 0.0);
    }
    static addWindSpeed(builder, windSpeed) {
        builder.addFieldFloat32(25, windSpeed, 0.0);
    }
    static endHourWeatherConditions(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createHourWeatherConditions(builder, forecastStart, cloudCover, cloudCoverLowAltPct, cloudCoverMidAltPct, cloudCoverHighAltPct, conditionCode, daylight, humidity, perceivedPrecipitationIntensity, precipitationAmount, precipitationIntensity, precipitationChance, precipitationType, pressure, pressureTrend, snowfallAmount, snowfallIntensity, temperature, temperatureApparent, unknown20, temperatureDewPoint, uvIndex, visibility, windDirection, windGust, windSpeed) {
        HourWeatherConditions.startHourWeatherConditions(builder);
        HourWeatherConditions.addForecastStart(builder, forecastStart);
        HourWeatherConditions.addCloudCover(builder, cloudCover);
        HourWeatherConditions.addCloudCoverLowAltPct(builder, cloudCoverLowAltPct);
        HourWeatherConditions.addCloudCoverMidAltPct(builder, cloudCoverMidAltPct);
        HourWeatherConditions.addCloudCoverHighAltPct(builder, cloudCoverHighAltPct);
        HourWeatherConditions.addConditionCode(builder, conditionCode);
        HourWeatherConditions.addDaylight(builder, daylight);
        HourWeatherConditions.addHumidity(builder, humidity);
        HourWeatherConditions.addPerceivedPrecipitationIntensity(builder, perceivedPrecipitationIntensity);
        HourWeatherConditions.addPrecipitationAmount(builder, precipitationAmount);
        HourWeatherConditions.addPrecipitationIntensity(builder, precipitationIntensity);
        HourWeatherConditions.addPrecipitationChance(builder, precipitationChance);
        HourWeatherConditions.addPrecipitationType(builder, precipitationType);
        HourWeatherConditions.addPressure(builder, pressure);
        HourWeatherConditions.addPressureTrend(builder, pressureTrend);
        HourWeatherConditions.addSnowfallAmount(builder, snowfallAmount);
        HourWeatherConditions.addSnowfallIntensity(builder, snowfallIntensity);
        HourWeatherConditions.addTemperature(builder, temperature);
        HourWeatherConditions.addTemperatureApparent(builder, temperatureApparent);
        HourWeatherConditions.addUnknown20(builder, unknown20);
        HourWeatherConditions.addTemperatureDewPoint(builder, temperatureDewPoint);
        HourWeatherConditions.addUvIndex(builder, uvIndex);
        HourWeatherConditions.addVisibility(builder, visibility);
        HourWeatherConditions.addWindDirection(builder, windDirection);
        HourWeatherConditions.addWindGust(builder, windGust);
        HourWeatherConditions.addWindSpeed(builder, windSpeed);
        return HourWeatherConditions.endHourWeatherConditions(builder);
    }
}
