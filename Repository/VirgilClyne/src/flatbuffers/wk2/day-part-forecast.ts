// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PrecipitationAmountByType } from '../wk2/precipitation-amount-by-type.js';
import { PrecipitationType } from '../wk2/precipitation-type.js';
import { WeatherCondition } from '../wk2/weather-condition.js';


export class DayPartForecast {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DayPartForecast {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDayPartForecast(bb:flatbuffers.ByteBuffer, obj?:DayPartForecast):DayPartForecast {
  return (obj || new DayPartForecast()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDayPartForecast(bb:flatbuffers.ByteBuffer, obj?:DayPartForecast):DayPartForecast {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DayPartForecast()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

forecastStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

forecastEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

cloudCover():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cloudCoverLowAltPct():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cloudCoverMidAltPct():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cloudCoverHighAltPct():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

conditionCode():WeatherCondition {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeatherCondition.CLEAR;
}

humidity():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

humidityMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

humidityMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

precipitationAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

precipitationAmountByType(index: number, obj?:PrecipitationAmountByType):PrecipitationAmountByType|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new PrecipitationAmountByType()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

precipitationAmountByTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

precipitationChance():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

precipitationType():PrecipitationType {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PrecipitationType.CLEAR;
}

snowfallAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

temperatureMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

temperatureMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

visibilityMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

visibilityMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

windDirection():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

windGustSpeedMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

windSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

windSpeedMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startDayPartForecast(builder:flatbuffers.Builder) {
  builder.startObject(23);
}

static addForecastStart(builder:flatbuffers.Builder, forecastStart:number) {
  builder.addFieldInt32(0, forecastStart, 0);
}

static addForecastEnd(builder:flatbuffers.Builder, forecastEnd:number) {
  builder.addFieldInt32(1, forecastEnd, 0);
}

static addCloudCover(builder:flatbuffers.Builder, cloudCover:number) {
  builder.addFieldInt8(2, cloudCover, 0);
}

static addCloudCoverLowAltPct(builder:flatbuffers.Builder, cloudCoverLowAltPct:number) {
  builder.addFieldInt8(3, cloudCoverLowAltPct, 0);
}

static addCloudCoverMidAltPct(builder:flatbuffers.Builder, cloudCoverMidAltPct:number) {
  builder.addFieldInt8(4, cloudCoverMidAltPct, 0);
}

static addCloudCoverHighAltPct(builder:flatbuffers.Builder, cloudCoverHighAltPct:number) {
  builder.addFieldInt8(5, cloudCoverHighAltPct, 0);
}

static addConditionCode(builder:flatbuffers.Builder, conditionCode:WeatherCondition) {
  builder.addFieldInt8(6, conditionCode, WeatherCondition.CLEAR);
}

static addHumidity(builder:flatbuffers.Builder, humidity:number) {
  builder.addFieldInt8(7, humidity, 0);
}

static addHumidityMax(builder:flatbuffers.Builder, humidityMax:number) {
  builder.addFieldInt8(8, humidityMax, 0);
}

static addHumidityMin(builder:flatbuffers.Builder, humidityMin:number) {
  builder.addFieldInt8(9, humidityMin, 0);
}

static addPrecipitationAmount(builder:flatbuffers.Builder, precipitationAmount:number) {
  builder.addFieldFloat32(10, precipitationAmount, 0.0);
}

static addPrecipitationAmountByType(builder:flatbuffers.Builder, precipitationAmountByTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, precipitationAmountByTypeOffset, 0);
}

static createPrecipitationAmountByTypeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPrecipitationAmountByTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPrecipitationChance(builder:flatbuffers.Builder, precipitationChance:number) {
  builder.addFieldInt8(12, precipitationChance, 0);
}

static addPrecipitationType(builder:flatbuffers.Builder, precipitationType:PrecipitationType) {
  builder.addFieldInt8(13, precipitationType, PrecipitationType.CLEAR);
}

static addSnowfallAmount(builder:flatbuffers.Builder, snowfallAmount:number) {
  builder.addFieldFloat32(14, snowfallAmount, 0.0);
}

static addTemperatureMax(builder:flatbuffers.Builder, temperatureMax:number) {
  builder.addFieldFloat32(15, temperatureMax, 0.0);
}

static addTemperatureMin(builder:flatbuffers.Builder, temperatureMin:number) {
  builder.addFieldFloat32(16, temperatureMin, 0.0);
}

static addVisibilityMax(builder:flatbuffers.Builder, visibilityMax:number) {
  builder.addFieldFloat32(17, visibilityMax, 0.0);
}

static addVisibilityMin(builder:flatbuffers.Builder, visibilityMin:number) {
  builder.addFieldFloat32(18, visibilityMin, 0.0);
}

static addWindDirection(builder:flatbuffers.Builder, windDirection:number) {
  builder.addFieldInt16(19, windDirection, 0);
}

static addWindGustSpeedMax(builder:flatbuffers.Builder, windGustSpeedMax:number) {
  builder.addFieldFloat32(20, windGustSpeedMax, 0.0);
}

static addWindSpeed(builder:flatbuffers.Builder, windSpeed:number) {
  builder.addFieldFloat32(21, windSpeed, 0.0);
}

static addWindSpeedMax(builder:flatbuffers.Builder, windSpeedMax:number) {
  builder.addFieldFloat32(22, windSpeedMax, 0.0);
}

static endDayPartForecast(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDayPartForecast(builder:flatbuffers.Builder, forecastStart:number, forecastEnd:number, cloudCover:number, cloudCoverLowAltPct:number, cloudCoverMidAltPct:number, cloudCoverHighAltPct:number, conditionCode:WeatherCondition, humidity:number, humidityMax:number, humidityMin:number, precipitationAmount:number, precipitationAmountByTypeOffset:flatbuffers.Offset, precipitationChance:number, precipitationType:PrecipitationType, snowfallAmount:number, temperatureMax:number, temperatureMin:number, visibilityMax:number, visibilityMin:number, windDirection:number, windGustSpeedMax:number, windSpeed:number, windSpeedMax:number):flatbuffers.Offset {
  DayPartForecast.startDayPartForecast(builder);
  DayPartForecast.addForecastStart(builder, forecastStart);
  DayPartForecast.addForecastEnd(builder, forecastEnd);
  DayPartForecast.addCloudCover(builder, cloudCover);
  DayPartForecast.addCloudCoverLowAltPct(builder, cloudCoverLowAltPct);
  DayPartForecast.addCloudCoverMidAltPct(builder, cloudCoverMidAltPct);
  DayPartForecast.addCloudCoverHighAltPct(builder, cloudCoverHighAltPct);
  DayPartForecast.addConditionCode(builder, conditionCode);
  DayPartForecast.addHumidity(builder, humidity);
  DayPartForecast.addHumidityMax(builder, humidityMax);
  DayPartForecast.addHumidityMin(builder, humidityMin);
  DayPartForecast.addPrecipitationAmount(builder, precipitationAmount);
  DayPartForecast.addPrecipitationAmountByType(builder, precipitationAmountByTypeOffset);
  DayPartForecast.addPrecipitationChance(builder, precipitationChance);
  DayPartForecast.addPrecipitationType(builder, precipitationType);
  DayPartForecast.addSnowfallAmount(builder, snowfallAmount);
  DayPartForecast.addTemperatureMax(builder, temperatureMax);
  DayPartForecast.addTemperatureMin(builder, temperatureMin);
  DayPartForecast.addVisibilityMax(builder, visibilityMax);
  DayPartForecast.addVisibilityMin(builder, visibilityMin);
  DayPartForecast.addWindDirection(builder, windDirection);
  DayPartForecast.addWindGustSpeedMax(builder, windGustSpeedMax);
  DayPartForecast.addWindSpeed(builder, windSpeed);
  DayPartForecast.addWindSpeedMax(builder, windSpeedMax);
  return DayPartForecast.endDayPartForecast(builder);
}
}
