// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Articles {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsArticles(bb, obj) {
        return (obj || new Articles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsArticles(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Articles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    supportedStorefronts(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    supportedStorefrontsLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    alertIds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    alertIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    phenomena(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    phenomenaLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    headlineOverride(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    locale(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startArticles(builder) {
        builder.startObject(6);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addSupportedStorefronts(builder, supportedStorefrontsOffset) {
        builder.addFieldOffset(1, supportedStorefrontsOffset, 0);
    }
    static createSupportedStorefrontsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSupportedStorefrontsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAlertIds(builder, alertIdsOffset) {
        builder.addFieldOffset(2, alertIdsOffset, 0);
    }
    static createAlertIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlertIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPhenomena(builder, phenomenaOffset) {
        builder.addFieldOffset(3, phenomenaOffset, 0);
    }
    static createPhenomenaVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPhenomenaVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addHeadlineOverride(builder, headlineOverrideOffset) {
        builder.addFieldOffset(4, headlineOverrideOffset, 0);
    }
    static addLocale(builder, localeOffset) {
        builder.addFieldOffset(5, localeOffset, 0);
    }
    static endArticles(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createArticles(builder, idOffset, supportedStorefrontsOffset, alertIdsOffset, phenomenaOffset, headlineOverrideOffset, localeOffset) {
        Articles.startArticles(builder);
        Articles.addId(builder, idOffset);
        Articles.addSupportedStorefronts(builder, supportedStorefrontsOffset);
        Articles.addAlertIds(builder, alertIdsOffset);
        Articles.addPhenomena(builder, phenomenaOffset);
        Articles.addHeadlineOverride(builder, headlineOverrideOffset);
        Articles.addLocale(builder, localeOffset);
        return Articles.endArticles(builder);
    }
}
