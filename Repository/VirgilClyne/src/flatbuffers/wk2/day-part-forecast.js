// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { PrecipitationAmountByType } from '../wk2/precipitation-amount-by-type.js';
import { PrecipitationType } from '../wk2/precipitation-type.js';
import { WeatherCondition } from '../wk2/weather-condition.js';
export class DayPartForecast {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDayPartForecast(bb, obj) {
        return (obj || new DayPartForecast()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDayPartForecast(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DayPartForecast()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    forecastStart() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    forecastEnd() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    cloudCover() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    cloudCoverLowAltPct() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    cloudCoverMidAltPct() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    cloudCoverHighAltPct() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    conditionCode() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : WeatherCondition.CLEAR;
    }
    humidity() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    humidityMax() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    humidityMin() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    precipitationAmount() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    precipitationAmountByType(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? (obj || new PrecipitationAmountByType()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    precipitationAmountByTypeLength() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    precipitationChance() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    precipitationType() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PrecipitationType.CLEAR;
    }
    snowfallAmount() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperatureMax() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    temperatureMin() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    visibilityMax() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    visibilityMin() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windDirection() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    windGustSpeedMax() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windSpeed() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    windSpeedMax() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startDayPartForecast(builder) {
        builder.startObject(23);
    }
    static addForecastStart(builder, forecastStart) {
        builder.addFieldInt32(0, forecastStart, 0);
    }
    static addForecastEnd(builder, forecastEnd) {
        builder.addFieldInt32(1, forecastEnd, 0);
    }
    static addCloudCover(builder, cloudCover) {
        builder.addFieldInt8(2, cloudCover, 0);
    }
    static addCloudCoverLowAltPct(builder, cloudCoverLowAltPct) {
        builder.addFieldInt8(3, cloudCoverLowAltPct, 0);
    }
    static addCloudCoverMidAltPct(builder, cloudCoverMidAltPct) {
        builder.addFieldInt8(4, cloudCoverMidAltPct, 0);
    }
    static addCloudCoverHighAltPct(builder, cloudCoverHighAltPct) {
        builder.addFieldInt8(5, cloudCoverHighAltPct, 0);
    }
    static addConditionCode(builder, conditionCode) {
        builder.addFieldInt8(6, conditionCode, WeatherCondition.CLEAR);
    }
    static addHumidity(builder, humidity) {
        builder.addFieldInt8(7, humidity, 0);
    }
    static addHumidityMax(builder, humidityMax) {
        builder.addFieldInt8(8, humidityMax, 0);
    }
    static addHumidityMin(builder, humidityMin) {
        builder.addFieldInt8(9, humidityMin, 0);
    }
    static addPrecipitationAmount(builder, precipitationAmount) {
        builder.addFieldFloat32(10, precipitationAmount, 0.0);
    }
    static addPrecipitationAmountByType(builder, precipitationAmountByTypeOffset) {
        builder.addFieldOffset(11, precipitationAmountByTypeOffset, 0);
    }
    static createPrecipitationAmountByTypeVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPrecipitationAmountByTypeVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPrecipitationChance(builder, precipitationChance) {
        builder.addFieldInt8(12, precipitationChance, 0);
    }
    static addPrecipitationType(builder, precipitationType) {
        builder.addFieldInt8(13, precipitationType, PrecipitationType.CLEAR);
    }
    static addSnowfallAmount(builder, snowfallAmount) {
        builder.addFieldFloat32(14, snowfallAmount, 0.0);
    }
    static addTemperatureMax(builder, temperatureMax) {
        builder.addFieldFloat32(15, temperatureMax, 0.0);
    }
    static addTemperatureMin(builder, temperatureMin) {
        builder.addFieldFloat32(16, temperatureMin, 0.0);
    }
    static addVisibilityMax(builder, visibilityMax) {
        builder.addFieldFloat32(17, visibilityMax, 0.0);
    }
    static addVisibilityMin(builder, visibilityMin) {
        builder.addFieldFloat32(18, visibilityMin, 0.0);
    }
    static addWindDirection(builder, windDirection) {
        builder.addFieldInt16(19, windDirection, 0);
    }
    static addWindGustSpeedMax(builder, windGustSpeedMax) {
        builder.addFieldFloat32(20, windGustSpeedMax, 0.0);
    }
    static addWindSpeed(builder, windSpeed) {
        builder.addFieldFloat32(21, windSpeed, 0.0);
    }
    static addWindSpeedMax(builder, windSpeedMax) {
        builder.addFieldFloat32(22, windSpeedMax, 0.0);
    }
    static endDayPartForecast(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDayPartForecast(builder, forecastStart, forecastEnd, cloudCover, cloudCoverLowAltPct, cloudCoverMidAltPct, cloudCoverHighAltPct, conditionCode, humidity, humidityMax, humidityMin, precipitationAmount, precipitationAmountByTypeOffset, precipitationChance, precipitationType, snowfallAmount, temperatureMax, temperatureMin, visibilityMax, visibilityMin, windDirection, windGustSpeedMax, windSpeed, windSpeedMax) {
        DayPartForecast.startDayPartForecast(builder);
        DayPartForecast.addForecastStart(builder, forecastStart);
        DayPartForecast.addForecastEnd(builder, forecastEnd);
        DayPartForecast.addCloudCover(builder, cloudCover);
        DayPartForecast.addCloudCoverLowAltPct(builder, cloudCoverLowAltPct);
        DayPartForecast.addCloudCoverMidAltPct(builder, cloudCoverMidAltPct);
        DayPartForecast.addCloudCoverHighAltPct(builder, cloudCoverHighAltPct);
        DayPartForecast.addConditionCode(builder, conditionCode);
        DayPartForecast.addHumidity(builder, humidity);
        DayPartForecast.addHumidityMax(builder, humidityMax);
        DayPartForecast.addHumidityMin(builder, humidityMin);
        DayPartForecast.addPrecipitationAmount(builder, precipitationAmount);
        DayPartForecast.addPrecipitationAmountByType(builder, precipitationAmountByTypeOffset);
        DayPartForecast.addPrecipitationChance(builder, precipitationChance);
        DayPartForecast.addPrecipitationType(builder, precipitationType);
        DayPartForecast.addSnowfallAmount(builder, snowfallAmount);
        DayPartForecast.addTemperatureMax(builder, temperatureMax);
        DayPartForecast.addTemperatureMin(builder, temperatureMin);
        DayPartForecast.addVisibilityMax(builder, visibilityMax);
        DayPartForecast.addVisibilityMin(builder, visibilityMin);
        DayPartForecast.addWindDirection(builder, windDirection);
        DayPartForecast.addWindGustSpeedMax(builder, windGustSpeedMax);
        DayPartForecast.addWindSpeed(builder, windSpeed);
        DayPartForecast.addWindSpeedMax(builder, windSpeedMax);
        return DayPartForecast.endDayPartForecast(builder);
    }
}
