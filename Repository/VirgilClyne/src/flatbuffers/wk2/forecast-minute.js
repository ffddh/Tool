// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class ForecastMinute {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsForecastMinute(bb, obj) {
        return (obj || new ForecastMinute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsForecastMinute(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ForecastMinute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    startTime() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    precipitationChance() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    precipitationIntensity() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    perceivedPrecipitationIntensity() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startForecastMinute(builder) {
        builder.startObject(4);
    }
    static addStartTime(builder, startTime) {
        builder.addFieldInt32(0, startTime, 0);
    }
    static addPrecipitationChance(builder, precipitationChance) {
        builder.addFieldInt8(1, precipitationChance, 0);
    }
    static addPrecipitationIntensity(builder, precipitationIntensity) {
        builder.addFieldFloat32(2, precipitationIntensity, 0.0);
    }
    static addPerceivedPrecipitationIntensity(builder, perceivedPrecipitationIntensity) {
        builder.addFieldFloat32(3, perceivedPrecipitationIntensity, 0.0);
    }
    static endForecastMinute(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createForecastMinute(builder, startTime, precipitationChance, precipitationIntensity, perceivedPrecipitationIntensity) {
        ForecastMinute.startForecastMinute(builder);
        ForecastMinute.addStartTime(builder, startTime);
        ForecastMinute.addPrecipitationChance(builder, precipitationChance);
        ForecastMinute.addPrecipitationIntensity(builder, precipitationIntensity);
        ForecastMinute.addPerceivedPrecipitationIntensity(builder, perceivedPrecipitationIntensity);
        return ForecastMinute.endForecastMinute(builder);
    }
}
