// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Change } from '../wk2/change.js';
import { Metadata } from '../wk2/metadata.js';


export class WeatherChanges {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WeatherChanges {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWeatherChanges(bb:flatbuffers.ByteBuffer, obj?:WeatherChanges):WeatherChanges {
  return (obj || new WeatherChanges()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWeatherChanges(bb:flatbuffers.ByteBuffer, obj?:WeatherChanges):WeatherChanges {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WeatherChanges()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

metadata(obj?:Metadata):Metadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Metadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

forecastStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

forecastEnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

changes(index: number, obj?:Change):Change|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Change()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

changesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startWeatherChanges(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, metadataOffset, 0);
}

static addForecastStart(builder:flatbuffers.Builder, forecastStart:number) {
  builder.addFieldInt32(1, forecastStart, 0);
}

static addForecastEnd(builder:flatbuffers.Builder, forecastEnd:number) {
  builder.addFieldInt32(2, forecastEnd, 0);
}

static addChanges(builder:flatbuffers.Builder, changesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, changesOffset, 0);
}

static createChangesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChangesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endWeatherChanges(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWeatherChanges(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset, forecastStart:number, forecastEnd:number, changesOffset:flatbuffers.Offset):flatbuffers.Offset {
  WeatherChanges.startWeatherChanges(builder);
  WeatherChanges.addMetadata(builder, metadataOffset);
  WeatherChanges.addForecastStart(builder, forecastStart);
  WeatherChanges.addForecastEnd(builder, forecastEnd);
  WeatherChanges.addChanges(builder, changesOffset);
  return WeatherChanges.endWeatherChanges(builder);
}
}
