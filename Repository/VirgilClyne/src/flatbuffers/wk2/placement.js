// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Articles } from '../wk2/articles.js';
import { PlacementType } from '../wk2/placement-type.js';
export class Placement {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPlacement(bb, obj) {
        return (obj || new Placement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPlacement(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Placement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    priority() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    }
    articles(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Articles()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    articlesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    placement() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PlacementType.UNKNOWN0;
    }
    static startPlacement(builder) {
        builder.startObject(3);
    }
    static addPriority(builder, priority) {
        builder.addFieldInt8(0, priority, 0);
    }
    static addArticles(builder, articlesOffset) {
        builder.addFieldOffset(1, articlesOffset, 0);
    }
    static createArticlesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startArticlesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPlacement(builder, placement) {
        builder.addFieldInt8(2, placement, PlacementType.UNKNOWN0);
    }
    static endPlacement(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPlacement(builder, priority, articlesOffset, placement) {
        Placement.startPlacement(builder);
        Placement.addPriority(builder, priority);
        Placement.addArticles(builder, articlesOffset);
        Placement.addPlacement(builder, placement);
        return Placement.endPlacement(builder);
    }
}
