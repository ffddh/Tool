// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PrecipitationType } from '../wk2/precipitation-type.js';
import { PressureTrend } from '../wk2/pressure-trend.js';
import { WeatherCondition } from '../wk2/weather-condition.js';


export class HourWeatherConditions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HourWeatherConditions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHourWeatherConditions(bb:flatbuffers.ByteBuffer, obj?:HourWeatherConditions):HourWeatherConditions {
  return (obj || new HourWeatherConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHourWeatherConditions(bb:flatbuffers.ByteBuffer, obj?:HourWeatherConditions):HourWeatherConditions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HourWeatherConditions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

forecastStart():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

cloudCover():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cloudCoverLowAltPct():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cloudCoverMidAltPct():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cloudCoverHighAltPct():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

conditionCode():WeatherCondition {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : WeatherCondition.CLEAR;
}

daylight():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

humidity():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

perceivedPrecipitationIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

precipitationAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

precipitationIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

precipitationChance():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

precipitationType():PrecipitationType {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PrecipitationType.CLEAR;
}

pressure():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

pressureTrend():PressureTrend {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PressureTrend.RISING;
}

snowfallAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

snowfallIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

temperature():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

temperatureApparent():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

unknown20():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

temperatureDewPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uvIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

visibility():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

windDirection():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

windGust():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

windSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startHourWeatherConditions(builder:flatbuffers.Builder) {
  builder.startObject(26);
}

static addForecastStart(builder:flatbuffers.Builder, forecastStart:number) {
  builder.addFieldInt32(0, forecastStart, 0);
}

static addCloudCover(builder:flatbuffers.Builder, cloudCover:number) {
  builder.addFieldInt8(1, cloudCover, 0);
}

static addCloudCoverLowAltPct(builder:flatbuffers.Builder, cloudCoverLowAltPct:number) {
  builder.addFieldInt8(2, cloudCoverLowAltPct, 0);
}

static addCloudCoverMidAltPct(builder:flatbuffers.Builder, cloudCoverMidAltPct:number) {
  builder.addFieldInt8(3, cloudCoverMidAltPct, 0);
}

static addCloudCoverHighAltPct(builder:flatbuffers.Builder, cloudCoverHighAltPct:number) {
  builder.addFieldInt8(4, cloudCoverHighAltPct, 0);
}

static addConditionCode(builder:flatbuffers.Builder, conditionCode:WeatherCondition) {
  builder.addFieldInt8(5, conditionCode, WeatherCondition.CLEAR);
}

static addDaylight(builder:flatbuffers.Builder, daylight:boolean) {
  builder.addFieldInt8(6, +daylight, +false);
}

static addHumidity(builder:flatbuffers.Builder, humidity:number) {
  builder.addFieldInt8(7, humidity, 0);
}

static addPerceivedPrecipitationIntensity(builder:flatbuffers.Builder, perceivedPrecipitationIntensity:number) {
  builder.addFieldFloat32(8, perceivedPrecipitationIntensity, 0.0);
}

static addPrecipitationAmount(builder:flatbuffers.Builder, precipitationAmount:number) {
  builder.addFieldFloat32(9, precipitationAmount, 0.0);
}

static addPrecipitationIntensity(builder:flatbuffers.Builder, precipitationIntensity:number) {
  builder.addFieldFloat32(10, precipitationIntensity, 0.0);
}

static addPrecipitationChance(builder:flatbuffers.Builder, precipitationChance:number) {
  builder.addFieldInt8(11, precipitationChance, 0);
}

static addPrecipitationType(builder:flatbuffers.Builder, precipitationType:PrecipitationType) {
  builder.addFieldInt8(12, precipitationType, PrecipitationType.CLEAR);
}

static addPressure(builder:flatbuffers.Builder, pressure:number) {
  builder.addFieldFloat32(13, pressure, 0.0);
}

static addPressureTrend(builder:flatbuffers.Builder, pressureTrend:PressureTrend) {
  builder.addFieldInt8(14, pressureTrend, PressureTrend.RISING);
}

static addSnowfallAmount(builder:flatbuffers.Builder, snowfallAmount:number) {
  builder.addFieldFloat32(15, snowfallAmount, 0.0);
}

static addSnowfallIntensity(builder:flatbuffers.Builder, snowfallIntensity:number) {
  builder.addFieldFloat32(16, snowfallIntensity, 0.0);
}

static addTemperature(builder:flatbuffers.Builder, temperature:number) {
  builder.addFieldFloat32(17, temperature, 0.0);
}

static addTemperatureApparent(builder:flatbuffers.Builder, temperatureApparent:number) {
  builder.addFieldFloat32(18, temperatureApparent, 0.0);
}

static addUnknown20(builder:flatbuffers.Builder, unknown20:number) {
  builder.addFieldFloat32(19, unknown20, 0.0);
}

static addTemperatureDewPoint(builder:flatbuffers.Builder, temperatureDewPoint:number) {
  builder.addFieldFloat32(20, temperatureDewPoint, 0.0);
}

static addUvIndex(builder:flatbuffers.Builder, uvIndex:number) {
  builder.addFieldInt8(21, uvIndex, 0);
}

static addVisibility(builder:flatbuffers.Builder, visibility:number) {
  builder.addFieldFloat32(22, visibility, 0.0);
}

static addWindDirection(builder:flatbuffers.Builder, windDirection:number) {
  builder.addFieldInt16(23, windDirection, 0);
}

static addWindGust(builder:flatbuffers.Builder, windGust:number) {
  builder.addFieldFloat32(24, windGust, 0.0);
}

static addWindSpeed(builder:flatbuffers.Builder, windSpeed:number) {
  builder.addFieldFloat32(25, windSpeed, 0.0);
}

static endHourWeatherConditions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHourWeatherConditions(builder:flatbuffers.Builder, forecastStart:number, cloudCover:number, cloudCoverLowAltPct:number, cloudCoverMidAltPct:number, cloudCoverHighAltPct:number, conditionCode:WeatherCondition, daylight:boolean, humidity:number, perceivedPrecipitationIntensity:number, precipitationAmount:number, precipitationIntensity:number, precipitationChance:number, precipitationType:PrecipitationType, pressure:number, pressureTrend:PressureTrend, snowfallAmount:number, snowfallIntensity:number, temperature:number, temperatureApparent:number, unknown20:number, temperatureDewPoint:number, uvIndex:number, visibility:number, windDirection:number, windGust:number, windSpeed:number):flatbuffers.Offset {
  HourWeatherConditions.startHourWeatherConditions(builder);
  HourWeatherConditions.addForecastStart(builder, forecastStart);
  HourWeatherConditions.addCloudCover(builder, cloudCover);
  HourWeatherConditions.addCloudCoverLowAltPct(builder, cloudCoverLowAltPct);
  HourWeatherConditions.addCloudCoverMidAltPct(builder, cloudCoverMidAltPct);
  HourWeatherConditions.addCloudCoverHighAltPct(builder, cloudCoverHighAltPct);
  HourWeatherConditions.addConditionCode(builder, conditionCode);
  HourWeatherConditions.addDaylight(builder, daylight);
  HourWeatherConditions.addHumidity(builder, humidity);
  HourWeatherConditions.addPerceivedPrecipitationIntensity(builder, perceivedPrecipitationIntensity);
  HourWeatherConditions.addPrecipitationAmount(builder, precipitationAmount);
  HourWeatherConditions.addPrecipitationIntensity(builder, precipitationIntensity);
  HourWeatherConditions.addPrecipitationChance(builder, precipitationChance);
  HourWeatherConditions.addPrecipitationType(builder, precipitationType);
  HourWeatherConditions.addPressure(builder, pressure);
  HourWeatherConditions.addPressureTrend(builder, pressureTrend);
  HourWeatherConditions.addSnowfallAmount(builder, snowfallAmount);
  HourWeatherConditions.addSnowfallIntensity(builder, snowfallIntensity);
  HourWeatherConditions.addTemperature(builder, temperature);
  HourWeatherConditions.addTemperatureApparent(builder, temperatureApparent);
  HourWeatherConditions.addUnknown20(builder, unknown20);
  HourWeatherConditions.addTemperatureDewPoint(builder, temperatureDewPoint);
  HourWeatherConditions.addUvIndex(builder, uvIndex);
  HourWeatherConditions.addVisibility(builder, visibility);
  HourWeatherConditions.addWindDirection(builder, windDirection);
  HourWeatherConditions.addWindGust(builder, windGust);
  HourWeatherConditions.addWindSpeed(builder, windSpeed);
  return HourWeatherConditions.endHourWeatherConditions(builder);
}
}
