// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,keep_enum_prefix,output_javascript
// @generated from protobuf file "com.apple.geo.protobuf.geo.proto" (package "com.apple.geo.protobuf.geo", syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.TileSet.TileSetVersionUpdateBehavior
 */
export var TileSet_TileSetVersionUpdateBehavior;
(function (TileSet_TileSetVersionUpdateBehavior) {
    /**
     * @generated from protobuf enum value: TILE_UPDATE_BEHAVIOR_FLUSH = 0;
     */
    TileSet_TileSetVersionUpdateBehavior[TileSet_TileSetVersionUpdateBehavior["TILE_UPDATE_BEHAVIOR_FLUSH"] = 0] = "TILE_UPDATE_BEHAVIOR_FLUSH";
    /**
     * @generated from protobuf enum value: TILE_UPDATE_BEHAVIOR_ETAG = 1;
     */
    TileSet_TileSetVersionUpdateBehavior[TileSet_TileSetVersionUpdateBehavior["TILE_UPDATE_BEHAVIOR_ETAG"] = 1] = "TILE_UPDATE_BEHAVIOR_ETAG";
})(TileSet_TileSetVersionUpdateBehavior || (TileSet_TileSetVersionUpdateBehavior = {}));
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.TileSet.TileSetChecksumType
 */
export var TileSet_TileSetChecksumType;
(function (TileSet_TileSetChecksumType) {
    /**
     * @generated from protobuf enum value: CHECKSUM_TYPE_NONE = 0;
     */
    TileSet_TileSetChecksumType[TileSet_TileSetChecksumType["CHECKSUM_TYPE_NONE"] = 0] = "CHECKSUM_TYPE_NONE";
    /**
     * @generated from protobuf enum value: CHECKSUM_TYPE_APPENDED_MD5 = 1;
     */
    TileSet_TileSetChecksumType[TileSet_TileSetChecksumType["CHECKSUM_TYPE_APPENDED_MD5"] = 1] = "CHECKSUM_TYPE_APPENDED_MD5";
})(TileSet_TileSetChecksumType || (TileSet_TileSetChecksumType = {}));
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.TileSet.TileRequestStyle
 */
export var TileSet_TileRequestStyle;
(function (TileSet_TileRequestStyle) {
    /**
     * @generated from protobuf enum value: REQUEST_STYLE_LEGACY = 0;
     */
    TileSet_TileRequestStyle[TileSet_TileRequestStyle["REQUEST_STYLE_LEGACY"] = 0] = "REQUEST_STYLE_LEGACY";
    /**
     * @generated from protobuf enum value: REQUEST_STYLE_HEADER_PARAMS_VERSION_BASED_HMAC_AUTH = 1;
     */
    TileSet_TileRequestStyle[TileSet_TileRequestStyle["REQUEST_STYLE_HEADER_PARAMS_VERSION_BASED_HMAC_AUTH"] = 1] = "REQUEST_STYLE_HEADER_PARAMS_VERSION_BASED_HMAC_AUTH";
})(TileSet_TileRequestStyle || (TileSet_TileRequestStyle = {}));
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.TileSetStyle
 */
export var TileSetStyle;
(function (TileSetStyle) {
    /**
     * option allow_alias = true;
     *
     * @generated from protobuf enum value: RASTER_STANDARD = 0;
     */
    TileSetStyle[TileSetStyle["RASTER_STANDARD"] = 0] = "RASTER_STANDARD";
    /**
     * @generated from protobuf enum value: VECTOR_STANDARD = 1;
     */
    TileSetStyle[TileSetStyle["VECTOR_STANDARD"] = 1] = "VECTOR_STANDARD";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER = 2;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER"] = 2] = "VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER = 3;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER"] = 3] = "VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER = 4;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER"] = 4] = "VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER";
    /**
     * @generated from protobuf enum value: RASTER_STANDARD_BACKGROUND = 5;
     */
    TileSetStyle[TileSetStyle["RASTER_STANDARD_BACKGROUND"] = 5] = "RASTER_STANDARD_BACKGROUND";
    /**
     * @generated from protobuf enum value: RASTER_HYBRID = 6;
     */
    TileSetStyle[TileSetStyle["RASTER_HYBRID"] = 6] = "RASTER_HYBRID";
    /**
     * @generated from protobuf enum value: RASTER_SATELLITE = 7;
     */
    TileSetStyle[TileSetStyle["RASTER_SATELLITE"] = 7] = "RASTER_SATELLITE";
    /**
     * @generated from protobuf enum value: RASTER_TERRAIN = 8;
     */
    TileSetStyle[TileSetStyle["RASTER_TERRAIN"] = 8] = "RASTER_TERRAIN";
    /**
     * @generated from protobuf enum value: VECTOR_BUILDINGS = 11;
     */
    TileSetStyle[TileSetStyle["VECTOR_BUILDINGS"] = 11] = "VECTOR_BUILDINGS";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC = 12;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC"] = 12] = "VECTOR_TRAFFIC";
    /**
     * @generated from protobuf enum value: VECTOR_POI = 13;
     */
    TileSetStyle[TileSetStyle["VECTOR_POI"] = 13] = "VECTOR_POI";
    /**
     * @generated from protobuf enum value: SPUTNIK_METADATA = 14;
     */
    TileSetStyle[TileSetStyle["SPUTNIK_METADATA"] = 14] = "SPUTNIK_METADATA";
    /**
     * @generated from protobuf enum value: SPUTNIK_C3M = 15;
     */
    TileSetStyle[TileSetStyle["SPUTNIK_C3M"] = 15] = "SPUTNIK_C3M";
    /**
     * @generated from protobuf enum value: SPUTNIK_DSM = 16;
     */
    TileSetStyle[TileSetStyle["SPUTNIK_DSM"] = 16] = "SPUTNIK_DSM";
    /**
     * @generated from protobuf enum value: SPUTNIK_DSM_GLOBAL = 17;
     */
    TileSetStyle[TileSetStyle["SPUTNIK_DSM_GLOBAL"] = 17] = "SPUTNIK_DSM_GLOBAL";
    /**
     * @generated from protobuf enum value: VECTOR_REALISTIC = 18;
     */
    TileSetStyle[TileSetStyle["VECTOR_REALISTIC"] = 18] = "VECTOR_REALISTIC";
    /**
     * @generated from protobuf enum value: VECTOR_LEGACY_REALISTIC = 19;
     */
    TileSetStyle[TileSetStyle["VECTOR_LEGACY_REALISTIC"] = 19] = "VECTOR_LEGACY_REALISTIC";
    /**
     * @generated from protobuf enum value: VECTOR_ROADS = 20;
     */
    TileSetStyle[TileSetStyle["VECTOR_ROADS"] = 20] = "VECTOR_ROADS";
    /**
     * @generated from protobuf enum value: RASTER_VEGETATION = 21;
     */
    TileSetStyle[TileSetStyle["RASTER_VEGETATION"] = 21] = "RASTER_VEGETATION";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_SKELETON = 22;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_SKELETON"] = 22] = "VECTOR_TRAFFIC_SKELETON";
    /**
     * @generated from protobuf enum value: RASTER_COASTLINE_MASK = 23;
     */
    TileSetStyle[TileSetStyle["RASTER_COASTLINE_MASK"] = 23] = "RASTER_COASTLINE_MASK";
    /**
     * @generated from protobuf enum value: RASTER_HILLSHADE = 24;
     */
    TileSetStyle[TileSetStyle["RASTER_HILLSHADE"] = 24] = "RASTER_HILLSHADE";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_WITH_GREEN = 25;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_WITH_GREEN"] = 25] = "VECTOR_TRAFFIC_WITH_GREEN";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_STATIC = 26;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_STATIC"] = 26] = "VECTOR_TRAFFIC_STATIC";
    /**
     * @generated from protobuf enum value: RASTER_COASTLINE_DROP_MASK = 27;
     */
    TileSetStyle[TileSetStyle["RASTER_COASTLINE_DROP_MASK"] = 27] = "RASTER_COASTLINE_DROP_MASK";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL = 28;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL"] = 28] = "VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL";
    /**
     * @generated from protobuf enum value: VECTOR_SPEED_PROFILES = 29;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPEED_PROFILES"] = 29] = "VECTOR_SPEED_PROFILES";
    /**
     * @generated from protobuf enum value: VECTOR_VENUES = 30;
     */
    TileSetStyle[TileSetStyle["VECTOR_VENUES"] = 30] = "VECTOR_VENUES";
    /**
     * @generated from protobuf enum value: RASTER_DOWN_SAMPLED = 31;
     */
    TileSetStyle[TileSetStyle["RASTER_DOWN_SAMPLED"] = 31] = "RASTER_DOWN_SAMPLED";
    /**
     * @generated from protobuf enum value: RASTER_COLOR_BALANCED = 32;
     */
    TileSetStyle[TileSetStyle["RASTER_COLOR_BALANCED"] = 32] = "RASTER_COLOR_BALANCED";
    /**
     * @generated from protobuf enum value: RASTER_SATELLITE_NIGHT = 33;
     */
    TileSetStyle[TileSetStyle["RASTER_SATELLITE_NIGHT"] = 33] = "RASTER_SATELLITE_NIGHT";
    /**
     * @generated from protobuf enum value: SPUTNIK_VECTOR_BORDER = 34;
     */
    TileSetStyle[TileSetStyle["SPUTNIK_VECTOR_BORDER"] = 34] = "SPUTNIK_VECTOR_BORDER";
    /**
     * @generated from protobuf enum value: RASTER_SATELLITE_DIGITIZE = 35;
     */
    TileSetStyle[TileSetStyle["RASTER_SATELLITE_DIGITIZE"] = 35] = "RASTER_SATELLITE_DIGITIZE";
    /**
     * @generated from protobuf enum value: RASTER_HILLSHADE_PARKS = 36;
     */
    TileSetStyle[TileSetStyle["RASTER_HILLSHADE_PARKS"] = 36] = "RASTER_HILLSHADE_PARKS";
    /**
     * @generated from protobuf enum value: VECTOR_TRANSIT = 37;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRANSIT"] = 37] = "VECTOR_TRANSIT";
    /**
     * @generated from protobuf enum value: RASTER_STANDARD_BASE = 38;
     */
    TileSetStyle[TileSetStyle["RASTER_STANDARD_BASE"] = 38] = "RASTER_STANDARD_BASE";
    /**
     * @generated from protobuf enum value: RASTER_STANDARD_LABELS = 39;
     */
    TileSetStyle[TileSetStyle["RASTER_STANDARD_LABELS"] = 39] = "RASTER_STANDARD_LABELS";
    /**
     * @generated from protobuf enum value: RASTER_HYBRID_ROADS = 40;
     */
    TileSetStyle[TileSetStyle["RASTER_HYBRID_ROADS"] = 40] = "RASTER_HYBRID_ROADS";
    /**
     * @generated from protobuf enum value: RASTER_HYBRID_LABELS = 41;
     */
    TileSetStyle[TileSetStyle["RASTER_HYBRID_LABELS"] = 41] = "RASTER_HYBRID_LABELS";
    /**
     * @generated from protobuf enum value: FLYOVER_C3M_MESH = 42;
     */
    TileSetStyle[TileSetStyle["FLYOVER_C3M_MESH"] = 42] = "FLYOVER_C3M_MESH";
    /**
     * @generated from protobuf enum value: FLYOVER_C3M_JPEG_TEXTURE = 43;
     */
    TileSetStyle[TileSetStyle["FLYOVER_C3M_JPEG_TEXTURE"] = 43] = "FLYOVER_C3M_JPEG_TEXTURE";
    /**
     * @generated from protobuf enum value: FLYOVER_C3M_ASTC_TEXTURE = 44;
     */
    TileSetStyle[TileSetStyle["FLYOVER_C3M_ASTC_TEXTURE"] = 44] = "FLYOVER_C3M_ASTC_TEXTURE";
    /**
     * @generated from protobuf enum value: RASTER_SATELLITE_ASTC = 45;
     */
    TileSetStyle[TileSetStyle["RASTER_SATELLITE_ASTC"] = 45] = "RASTER_SATELLITE_ASTC";
    /**
     * @generated from protobuf enum value: RASTER_HYBRID_ROADS_AND_LABELS = 46;
     */
    TileSetStyle[TileSetStyle["RASTER_HYBRID_ROADS_AND_LABELS"] = 46] = "RASTER_HYBRID_ROADS_AND_LABELS";
    /**
     * @generated from protobuf enum value: VECTOR_TRANSIT_SELECTION = 47;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRANSIT_SELECTION"] = 47] = "VECTOR_TRANSIT_SELECTION";
    /**
     * @generated from protobuf enum value: VECTOR_COVERAGE = 48;
     */
    TileSetStyle[TileSetStyle["VECTOR_COVERAGE"] = 48] = "VECTOR_COVERAGE";
    /**
     * @generated from protobuf enum value: FLYOVER_VISIBILITY = 49;
     */
    TileSetStyle[TileSetStyle["FLYOVER_VISIBILITY"] = 49] = "FLYOVER_VISIBILITY";
    /**
     * @generated from protobuf enum value: FLYOVER_SKYBOX = 50;
     */
    TileSetStyle[TileSetStyle["FLYOVER_SKYBOX"] = 50] = "FLYOVER_SKYBOX";
    /**
     * @generated from protobuf enum value: FLYOVER_NAVGRAPH = 51;
     */
    TileSetStyle[TileSetStyle["FLYOVER_NAVGRAPH"] = 51] = "FLYOVER_NAVGRAPH";
    /**
     * @generated from protobuf enum value: FLYOVER_METADATA = 52;
     */
    TileSetStyle[TileSetStyle["FLYOVER_METADATA"] = 52] = "FLYOVER_METADATA";
    /**
     * @generated from protobuf enum value: VECTOR_ROAD_NETWORK = 53;
     */
    TileSetStyle[TileSetStyle["VECTOR_ROAD_NETWORK"] = 53] = "VECTOR_ROAD_NETWORK";
    /**
     * @generated from protobuf enum value: VECTOR_LAND_COVER = 54;
     */
    TileSetStyle[TileSetStyle["VECTOR_LAND_COVER"] = 54] = "VECTOR_LAND_COVER";
    /**
     * @generated from protobuf enum value: VECTOR_DEBUG = 55;
     */
    TileSetStyle[TileSetStyle["VECTOR_DEBUG"] = 55] = "VECTOR_DEBUG";
    /**
     * @generated from protobuf enum value: VECTOR_STREET_POI = 56;
     */
    TileSetStyle[TileSetStyle["VECTOR_STREET_POI"] = 56] = "VECTOR_STREET_POI";
    /**
     * @generated from protobuf enum value: MUNIN_METADATA = 57;
     */
    TileSetStyle[TileSetStyle["MUNIN_METADATA"] = 57] = "MUNIN_METADATA";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_MERCATOR = 58;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_MERCATOR"] = 58] = "VECTOR_SPR_MERCATOR";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_MODELS = 59;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_MODELS"] = 59] = "VECTOR_SPR_MODELS";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_MATERIALS = 60;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_MATERIALS"] = 60] = "VECTOR_SPR_MATERIALS";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_METADATA = 61;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_METADATA"] = 61] = "VECTOR_SPR_METADATA";
    /**
     * @generated from protobuf enum value: VECTOR_TRACKS = 62;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRACKS"] = 62] = "VECTOR_TRACKS";
    /**
     * @generated from protobuf enum value: VECTOR_RESERVED_2 = 63;
     */
    TileSetStyle[TileSetStyle["VECTOR_RESERVED_2"] = 63] = "VECTOR_RESERVED_2";
    /**
     * @generated from protobuf enum value: VECTOR_STREET_LANDMARKS = 64;
     */
    TileSetStyle[TileSetStyle["VECTOR_STREET_LANDMARKS"] = 64] = "VECTOR_STREET_LANDMARKS";
    /**
     * @generated from protobuf enum value: COARSE_LOCATION_POLYGONS = 65;
     */
    TileSetStyle[TileSetStyle["COARSE_LOCATION_POLYGONS"] = 65] = "COARSE_LOCATION_POLYGONS";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_ROADS = 66;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_ROADS"] = 66] = "VECTOR_SPR_ROADS";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_STANDARD = 67;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_STANDARD"] = 67] = "VECTOR_SPR_STANDARD";
    /**
     * @generated from protobuf enum value: VECTOR_POI_V2 = 68;
     */
    TileSetStyle[TileSetStyle["VECTOR_POI_V2"] = 68] = "VECTOR_POI_V2";
    /**
     * @generated from protobuf enum value: VECTOR_POLYGON_SELECTION = 69;
     */
    TileSetStyle[TileSetStyle["VECTOR_POLYGON_SELECTION"] = 69] = "VECTOR_POLYGON_SELECTION";
    /**
     * @generated from protobuf enum value: VL_METADATA = 70;
     */
    TileSetStyle[TileSetStyle["VL_METADATA"] = 70] = "VL_METADATA";
    /**
     * @generated from protobuf enum value: VL_DATA = 71;
     */
    TileSetStyle[TileSetStyle["VL_DATA"] = 71] = "VL_DATA";
    /**
     * @generated from protobuf enum value: PROACTIVE_APP_CLIP = 72;
     */
    TileSetStyle[TileSetStyle["PROACTIVE_APP_CLIP"] = 72] = "PROACTIVE_APP_CLIP";
    /**
     * @generated from protobuf enum value: VECTOR_BUILDINGS_V2 = 73;
     */
    TileSetStyle[TileSetStyle["VECTOR_BUILDINGS_V2"] = 73] = "VECTOR_BUILDINGS_V2";
    /**
     * @generated from protobuf enum value: POI_BUSYNESS = 74;
     */
    TileSetStyle[TileSetStyle["POI_BUSYNESS"] = 74] = "POI_BUSYNESS";
    /**
     * @generated from protobuf enum value: POI_DP_BUSYNESS = 75;
     */
    TileSetStyle[TileSetStyle["POI_DP_BUSYNESS"] = 75] = "POI_DP_BUSYNESS";
    /**
     * @generated from protobuf enum value: SMART_INTERFACE_SELECTION = 76;
     */
    TileSetStyle[TileSetStyle["SMART_INTERFACE_SELECTION"] = 76] = "SMART_INTERFACE_SELECTION";
    /**
     * @generated from protobuf enum value: VECTOR_ASSETS = 77;
     */
    TileSetStyle[TileSetStyle["VECTOR_ASSETS"] = 77] = "VECTOR_ASSETS";
    /**
     * @generated from protobuf enum value: SPR_ASSET_METADATA = 78;
     */
    TileSetStyle[TileSetStyle["SPR_ASSET_METADATA"] = 78] = "SPR_ASSET_METADATA";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_POLAR = 79;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_POLAR"] = 79] = "VECTOR_SPR_POLAR";
    /**
     * @generated from protobuf enum value: SMART_DATA_MODE = 80;
     */
    TileSetStyle[TileSetStyle["SMART_DATA_MODE"] = 80] = "SMART_DATA_MODE";
    /**
     * @generated from protobuf enum value: CELLULAR_PERFORMANCE_SCORE = 81;
     */
    TileSetStyle[TileSetStyle["CELLULAR_PERFORMANCE_SCORE"] = 81] = "CELLULAR_PERFORMANCE_SCORE";
    /**
     * @generated from protobuf enum value: VECTOR_SPR_MODELS_OCCLUSION = 82;
     */
    TileSetStyle[TileSetStyle["VECTOR_SPR_MODELS_OCCLUSION"] = 82] = "VECTOR_SPR_MODELS_OCCLUSION";
    /**
     * @generated from protobuf enum value: VECTOR_TOPOGRAPHIC = 83;
     */
    TileSetStyle[TileSetStyle["VECTOR_TOPOGRAPHIC"] = 83] = "VECTOR_TOPOGRAPHIC";
    /**
     * @generated from protobuf enum value: VECTOR_POI_V2_UPDATE = 84;
     */
    TileSetStyle[TileSetStyle["VECTOR_POI_V2_UPDATE"] = 84] = "VECTOR_POI_V2_UPDATE";
    /**
     * @generated from protobuf enum value: VECTOR_LIVE_DATA_UPDATES = 85;
     */
    TileSetStyle[TileSetStyle["VECTOR_LIVE_DATA_UPDATES"] = 85] = "VECTOR_LIVE_DATA_UPDATES";
    /**
     * @generated from protobuf enum value: VECTOR_TRAFFIC_V2 = 86;
     */
    TileSetStyle[TileSetStyle["VECTOR_TRAFFIC_V2"] = 86] = "VECTOR_TRAFFIC_V2";
    /**
     * @generated from protobuf enum value: VECTOR_ROAD_SELECTION = 87;
     */
    TileSetStyle[TileSetStyle["VECTOR_ROAD_SELECTION"] = 87] = "VECTOR_ROAD_SELECTION";
    /**
     * @generated from protobuf enum value: VECTOR_REGION_METADATA = 88;
     */
    TileSetStyle[TileSetStyle["VECTOR_REGION_METADATA"] = 88] = "VECTOR_REGION_METADATA";
    /**
     * @generated from protobuf enum value: RAY_TRACING = 89;
     */
    TileSetStyle[TileSetStyle["RAY_TRACING"] = 89] = "RAY_TRACING";
    /**
     * @generated from protobuf enum value: VECTOR_CONTOURS = 90;
     */
    TileSetStyle[TileSetStyle["VECTOR_CONTOURS"] = 90] = "VECTOR_CONTOURS";
    /**
     * @generated from protobuf enum value: RASTER_SATELLITE_POLAR = 91;
     */
    TileSetStyle[TileSetStyle["RASTER_SATELLITE_POLAR"] = 91] = "RASTER_SATELLITE_POLAR";
    /**
     * @generated from protobuf enum value: VMAP4_ELEVATION = 92;
     */
    TileSetStyle[TileSetStyle["VMAP4_ELEVATION"] = 92] = "VMAP4_ELEVATION";
    /**
     * @generated from protobuf enum value: VMAP4_ELEVATION_POLAR = 93;
     */
    TileSetStyle[TileSetStyle["VMAP4_ELEVATION_POLAR"] = 93] = "VMAP4_ELEVATION_POLAR";
    /**
     * @generated from protobuf enum value: CELLULAR_COVERAGE_PLMN = 94;
     */
    TileSetStyle[TileSetStyle["CELLULAR_COVERAGE_PLMN"] = 94] = "CELLULAR_COVERAGE_PLMN";
    /**
     * @generated from protobuf enum value: RASTER_SATELLITE_POLAR_NIGHT = 95;
     */
    TileSetStyle[TileSetStyle["RASTER_SATELLITE_POLAR_NIGHT"] = 95] = "RASTER_SATELLITE_POLAR_NIGHT";
    /**
     * @generated from protobuf enum value: UNUSED_96 = 96;
     */
    TileSetStyle[TileSetStyle["UNUSED_96"] = 96] = "UNUSED_96";
    /**
     * @generated from protobuf enum value: UNUSED_97 = 97;
     */
    TileSetStyle[TileSetStyle["UNUSED_97"] = 97] = "UNUSED_97";
    /**
     * @generated from protobuf enum value: UNUSED_98 = 98;
     */
    TileSetStyle[TileSetStyle["UNUSED_98"] = 98] = "UNUSED_98";
    /**
     * DAVINCI_DEV1 = 58;
     * DAVINCI_DEV2 = 59;
     * DAVINCI_DEV3 = 60;
     * DAVINCI_DEV4 = 61;
     * DAVINCI_DEV6 = 63;
     * DAVINCI_DEV7 = 66;
     * DAVINCI_DEV8 = 67;
     * DAVINCI_DEV9 = 68;
     * DAVINCI_BUILDINGS = 73;
     * VECTOR_RESERVED_1 = 62;
     *
     * @generated from protobuf enum value: UNUSED_99 = 99;
     */
    TileSetStyle[TileSetStyle["UNUSED_99"] = 99] = "UNUSED_99";
})(TileSetStyle || (TileSetStyle = {}));
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.TileScale
 */
export var TileScale;
(function (TileScale) {
    /**
     * @generated from protobuf enum value: NODPI = 0;
     */
    TileScale[TileScale["NODPI"] = 0] = "NODPI";
    /**
     * @generated from protobuf enum value: LODPI = 1;
     */
    TileScale[TileScale["LODPI"] = 1] = "LODPI";
    /**
     * @generated from protobuf enum value: HIDPI = 2;
     */
    TileScale[TileScale["HIDPI"] = 2] = "HIDPI";
})(TileScale || (TileScale = {}));
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.TileSize
 */
export var TileSize;
(function (TileSize) {
    /**
     * @generated from protobuf enum value: PX128 = 0;
     */
    TileSize[TileSize["PX128"] = 0] = "PX128";
    /**
     * @generated from protobuf enum value: PX256 = 1;
     */
    TileSize[TileSize["PX256"] = 1] = "PX256";
    /**
     * @generated from protobuf enum value: PX512 = 2;
     */
    TileSize[TileSize["PX512"] = 2] = "PX512";
})(TileSize || (TileSize = {}));
/**
 * @generated from protobuf enum com.apple.geo.protobuf.geo.GenericTileType
 */
export var GenericTileType;
(function (GenericTileType) {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    GenericTileType[GenericTileType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from protobuf enum value: WATER = 1;
     */
    GenericTileType[GenericTileType["WATER"] = 1] = "WATER";
    /**
     * @generated from protobuf enum value: NO_TILE = 2;
     */
    GenericTileType[GenericTileType["NO_TILE"] = 2] = "NO_TILE";
})(GenericTileType || (GenericTileType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class GenericTile$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.GenericTile", [
            { no: 1, name: "tileType", kind: "enum", opt: true, T: () => ["com.apple.geo.protobuf.geo.GenericTileType", GenericTileType] },
            { no: 2, name: "textureIndex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "resourceIndex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.apple.geo.protobuf.geo.GenericTileType tileType */ 1:
                    message.tileType = reader.int32();
                    break;
                case /* optional uint32 textureIndex */ 2:
                    message.textureIndex = reader.uint32();
                    break;
                case /* optional uint32 resourceIndex */ 3:
                    message.resourceIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.apple.geo.protobuf.geo.GenericTileType tileType = 1; */
        if (message.tileType !== undefined)
            writer.tag(1, WireType.Varint).int32(message.tileType);
        /* optional uint32 textureIndex = 2; */
        if (message.textureIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.textureIndex);
        /* optional uint32 resourceIndex = 3; */
        if (message.resourceIndex !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.resourceIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.GenericTile
 */
export const GenericTile = new GenericTile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TileSetRegion$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.TileSetRegion", [
            { no: 1, name: "minX", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "minY", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "maxX", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "maxY", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "minZ", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "maxZ", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.minX = 0;
        message.minY = 0;
        message.maxX = 0;
        message.maxY = 0;
        message.minZ = 0;
        message.maxZ = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 minX */ 1:
                    message.minX = reader.uint32();
                    break;
                case /* uint32 minY */ 2:
                    message.minY = reader.uint32();
                    break;
                case /* uint32 maxX */ 3:
                    message.maxX = reader.uint32();
                    break;
                case /* uint32 maxY */ 4:
                    message.maxY = reader.uint32();
                    break;
                case /* uint32 minZ */ 5:
                    message.minZ = reader.uint32();
                    break;
                case /* uint32 maxZ */ 6:
                    message.maxZ = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 minX = 1; */
        if (message.minX !== 0)
            writer.tag(1, WireType.Varint).uint32(message.minX);
        /* uint32 minY = 2; */
        if (message.minY !== 0)
            writer.tag(2, WireType.Varint).uint32(message.minY);
        /* uint32 maxX = 3; */
        if (message.maxX !== 0)
            writer.tag(3, WireType.Varint).uint32(message.maxX);
        /* uint32 maxY = 4; */
        if (message.maxY !== 0)
            writer.tag(4, WireType.Varint).uint32(message.maxY);
        /* uint32 minZ = 5; */
        if (message.minZ !== 0)
            writer.tag(5, WireType.Varint).uint32(message.minZ);
        /* uint32 maxZ = 6; */
        if (message.maxZ !== 0)
            writer.tag(6, WireType.Varint).uint32(message.maxZ);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.TileSetRegion
 */
export const TileSetRegion = new TileSetRegion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TileSetVersion$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.TileSetVersion", [
            { no: 1, name: "identifier", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "availableTiles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TileSetRegion },
            { no: 3, name: "timeToLiveSeconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "genericTile", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GenericTile },
            { no: 5, name: "supportedLanguagesVersion", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.identifier = 0;
        message.availableTiles = [];
        message.genericTile = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 identifier */ 1:
                    message.identifier = reader.uint32();
                    break;
                case /* repeated com.apple.geo.protobuf.geo.TileSetRegion availableTiles */ 2:
                    message.availableTiles.push(TileSetRegion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 timeToLiveSeconds */ 3:
                    message.timeToLiveSeconds = reader.uint32();
                    break;
                case /* repeated com.apple.geo.protobuf.geo.GenericTile genericTile */ 4:
                    message.genericTile.push(GenericTile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 supportedLanguagesVersion */ 5:
                    message.supportedLanguagesVersion = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 identifier = 1; */
        if (message.identifier !== 0)
            writer.tag(1, WireType.Varint).uint32(message.identifier);
        /* repeated com.apple.geo.protobuf.geo.TileSetRegion availableTiles = 2; */
        for (let i = 0; i < message.availableTiles.length; i++)
            TileSetRegion.internalBinaryWrite(message.availableTiles[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 timeToLiveSeconds = 3; */
        if (message.timeToLiveSeconds !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.timeToLiveSeconds);
        /* repeated com.apple.geo.protobuf.geo.GenericTile genericTile = 4; */
        for (let i = 0; i < message.genericTile.length; i++)
            GenericTile.internalBinaryWrite(message.genericTile[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 supportedLanguagesVersion = 5; */
        if (message.supportedLanguagesVersion !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.supportedLanguagesVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.TileSetVersion
 */
export const TileSetVersion = new TileSetVersion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TileSet$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.TileSet", [
            { no: 1, name: "baseURL", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "multiTileURL", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "style", kind: "enum", T: () => ["com.apple.geo.protobuf.geo.TileSetStyle", TileSetStyle] },
            { no: 5, name: "validVersion", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TileSetVersion },
            { no: 6, name: "scale", kind: "enum", T: () => ["com.apple.geo.protobuf.geo.TileScale", TileScale] },
            { no: 7, name: "size", kind: "enum", T: () => ["com.apple.geo.protobuf.geo.TileSize", TileSize] },
            { no: 9, name: "localizationURL", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "supportedLanguage", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TileSet_Language },
            { no: 11, name: "multiTileURLUsesStatusCodes", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "updateBehavior", kind: "enum", opt: true, T: () => ["com.apple.geo.protobuf.geo.TileSet.TileSetVersionUpdateBehavior", TileSet_TileSetVersionUpdateBehavior] },
            { no: 13, name: "countryRegionWhitelist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TileSet_CountryRegionTuple },
            { no: 14, name: "checksumType", kind: "enum", opt: true, T: () => ["com.apple.geo.protobuf.geo.TileSet.TileSetChecksumType", TileSet_TileSetChecksumType] },
            { no: 15, name: "dataSet", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "requestStyle", kind: "enum", opt: true, T: () => ["com.apple.geo.protobuf.geo.TileSet.TileRequestStyle", TileSet_TileRequestStyle] },
            { no: 17, name: "useAuthProxy", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "supportsMultipathTCP", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "alternativeMultipathTCPPort", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 20, name: "deviceSKUWhitelist", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.style = 0;
        message.validVersion = [];
        message.scale = 0;
        message.size = 0;
        message.supportedLanguage = [];
        message.countryRegionWhitelist = [];
        message.deviceSKUWhitelist = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string baseURL */ 1:
                    message.baseURL = reader.string();
                    break;
                case /* optional string multiTileURL */ 2:
                    message.multiTileURL = reader.string();
                    break;
                case /* com.apple.geo.protobuf.geo.TileSetStyle style */ 3:
                    message.style = reader.int32();
                    break;
                case /* repeated com.apple.geo.protobuf.geo.TileSetVersion validVersion */ 5:
                    message.validVersion.push(TileSetVersion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* com.apple.geo.protobuf.geo.TileScale scale */ 6:
                    message.scale = reader.int32();
                    break;
                case /* com.apple.geo.protobuf.geo.TileSize size */ 7:
                    message.size = reader.int32();
                    break;
                case /* optional string localizationURL */ 9:
                    message.localizationURL = reader.string();
                    break;
                case /* repeated com.apple.geo.protobuf.geo.TileSet.Language supportedLanguage */ 10:
                    message.supportedLanguage.push(TileSet_Language.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool multiTileURLUsesStatusCodes */ 11:
                    message.multiTileURLUsesStatusCodes = reader.bool();
                    break;
                case /* optional com.apple.geo.protobuf.geo.TileSet.TileSetVersionUpdateBehavior updateBehavior */ 12:
                    message.updateBehavior = reader.int32();
                    break;
                case /* repeated com.apple.geo.protobuf.geo.TileSet.CountryRegionTuple countryRegionWhitelist */ 13:
                    message.countryRegionWhitelist.push(TileSet_CountryRegionTuple.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.apple.geo.protobuf.geo.TileSet.TileSetChecksumType checksumType */ 14:
                    message.checksumType = reader.int32();
                    break;
                case /* optional uint32 dataSet */ 15:
                    message.dataSet = reader.uint32();
                    break;
                case /* optional com.apple.geo.protobuf.geo.TileSet.TileRequestStyle requestStyle */ 16:
                    message.requestStyle = reader.int32();
                    break;
                case /* optional bool useAuthProxy */ 17:
                    message.useAuthProxy = reader.bool();
                    break;
                case /* optional bool supportsMultipathTCP */ 18:
                    message.supportsMultipathTCP = reader.bool();
                    break;
                case /* optional uint32 alternativeMultipathTCPPort */ 19:
                    message.alternativeMultipathTCPPort = reader.uint32();
                    break;
                case /* repeated string deviceSKUWhitelist */ 20:
                    message.deviceSKUWhitelist.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string baseURL = 1; */
        if (message.baseURL !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.baseURL);
        /* optional string multiTileURL = 2; */
        if (message.multiTileURL !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.multiTileURL);
        /* com.apple.geo.protobuf.geo.TileSetStyle style = 3; */
        if (message.style !== 0)
            writer.tag(3, WireType.Varint).int32(message.style);
        /* repeated com.apple.geo.protobuf.geo.TileSetVersion validVersion = 5; */
        for (let i = 0; i < message.validVersion.length; i++)
            TileSetVersion.internalBinaryWrite(message.validVersion[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* com.apple.geo.protobuf.geo.TileScale scale = 6; */
        if (message.scale !== 0)
            writer.tag(6, WireType.Varint).int32(message.scale);
        /* com.apple.geo.protobuf.geo.TileSize size = 7; */
        if (message.size !== 0)
            writer.tag(7, WireType.Varint).int32(message.size);
        /* optional string localizationURL = 9; */
        if (message.localizationURL !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.localizationURL);
        /* repeated com.apple.geo.protobuf.geo.TileSet.Language supportedLanguage = 10; */
        for (let i = 0; i < message.supportedLanguage.length; i++)
            TileSet_Language.internalBinaryWrite(message.supportedLanguage[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional bool multiTileURLUsesStatusCodes = 11; */
        if (message.multiTileURLUsesStatusCodes !== undefined)
            writer.tag(11, WireType.Varint).bool(message.multiTileURLUsesStatusCodes);
        /* optional com.apple.geo.protobuf.geo.TileSet.TileSetVersionUpdateBehavior updateBehavior = 12; */
        if (message.updateBehavior !== undefined)
            writer.tag(12, WireType.Varint).int32(message.updateBehavior);
        /* repeated com.apple.geo.protobuf.geo.TileSet.CountryRegionTuple countryRegionWhitelist = 13; */
        for (let i = 0; i < message.countryRegionWhitelist.length; i++)
            TileSet_CountryRegionTuple.internalBinaryWrite(message.countryRegionWhitelist[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional com.apple.geo.protobuf.geo.TileSet.TileSetChecksumType checksumType = 14; */
        if (message.checksumType !== undefined)
            writer.tag(14, WireType.Varint).int32(message.checksumType);
        /* optional uint32 dataSet = 15; */
        if (message.dataSet !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dataSet);
        /* optional com.apple.geo.protobuf.geo.TileSet.TileRequestStyle requestStyle = 16; */
        if (message.requestStyle !== undefined)
            writer.tag(16, WireType.Varint).int32(message.requestStyle);
        /* optional bool useAuthProxy = 17; */
        if (message.useAuthProxy !== undefined)
            writer.tag(17, WireType.Varint).bool(message.useAuthProxy);
        /* optional bool supportsMultipathTCP = 18; */
        if (message.supportsMultipathTCP !== undefined)
            writer.tag(18, WireType.Varint).bool(message.supportsMultipathTCP);
        /* optional uint32 alternativeMultipathTCPPort = 19; */
        if (message.alternativeMultipathTCPPort !== undefined)
            writer.tag(19, WireType.Varint).uint32(message.alternativeMultipathTCPPort);
        /* repeated string deviceSKUWhitelist = 20; */
        for (let i = 0; i < message.deviceSKUWhitelist.length; i++)
            writer.tag(20, WireType.LengthDelimited).string(message.deviceSKUWhitelist[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.TileSet
 */
export const TileSet = new TileSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TileSet_Language$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.TileSet.Language", [
            { no: 1, name: "identifier", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "language", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.identifier = 0;
        message.language = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 identifier */ 1:
                    message.identifier = reader.uint32();
                    break;
                case /* repeated string language */ 2:
                    message.language.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 identifier = 1; */
        if (message.identifier !== 0)
            writer.tag(1, WireType.Varint).uint32(message.identifier);
        /* repeated string language = 2; */
        for (let i = 0; i < message.language.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.language[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.TileSet.Language
 */
export const TileSet_Language = new TileSet_Language$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TileSet_CountryRegionTuple$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.TileSet.CountryRegionTuple", [
            { no: 1, name: "countryCode", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "region", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string countryCode */ 1:
                    message.countryCode = reader.string();
                    break;
                case /* optional string region */ 2:
                    message.region = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string countryCode = 1; */
        if (message.countryCode !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        /* optional string region = 2; */
        if (message.region !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.region);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.TileSet.CountryRegionTuple
 */
export const TileSet_CountryRegionTuple = new TileSet_CountryRegionTuple$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SupportedTileSets$Type extends MessageType {
    constructor() {
        super("com.apple.geo.protobuf.geo.SupportedTileSets", [
            { no: 1, name: "SupportedTileSets", kind: "message", jsonName: "SupportedTileSets", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TileSet }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.supportedTileSets = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.apple.geo.protobuf.geo.TileSet SupportedTileSets = 1 [json_name = "SupportedTileSets"];*/ 1:
                    message.supportedTileSets.push(TileSet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.apple.geo.protobuf.geo.TileSet SupportedTileSets = 1 [json_name = "SupportedTileSets"]; */
        for (let i = 0; i < message.supportedTileSets.length; i++)
            TileSet.internalBinaryWrite(message.supportedTileSets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.apple.geo.protobuf.geo.SupportedTileSets
 */
export const SupportedTileSets = new SupportedTileSets$Type();
