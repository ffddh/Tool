// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_number,keep_enum_prefix,output_javascript
// @generated from protobuf file "GEOPDClientMetadata.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class GEOPDClientMetadata$Type extends MessageType {
    constructor() {
        super("GEOPDClientMetadata", [
            { no: 1, name: "deviceCountryCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deviceDisplayLanguage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "deviceKeyboardLanguage", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deviceSpokenLanguage", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "timeSinceMapEnteredForeground", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "resultListAttributionSupport", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "hourOfDay", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "dayOfWeek", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "requiredVersion", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "debugApiKey", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "clientRevision", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "deviceSku", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.deviceCountryCode = "";
        message.deviceDisplayLanguage = "";
        message.resultListAttributionSupport = 0;
        message.dayOfWeek = 0;
        message.requiredVersion = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string deviceCountryCode */ 1:
                    message.deviceCountryCode = reader.string();
                    break;
                case /* string deviceDisplayLanguage */ 3:
                    message.deviceDisplayLanguage = reader.string();
                    break;
                case /* optional string deviceKeyboardLanguage */ 4:
                    message.deviceKeyboardLanguage = reader.string();
                    break;
                case /* optional string deviceSpokenLanguage */ 5:
                    message.deviceSpokenLanguage = reader.string();
                    break;
                case /* optional uint32 timeSinceMapEnteredForeground */ 8:
                    message.timeSinceMapEnteredForeground = reader.uint32();
                    break;
                case /* int32 resultListAttributionSupport */ 10:
                    message.resultListAttributionSupport = reader.int32();
                    break;
                case /* optional uint32 hourOfDay */ 11:
                    message.hourOfDay = reader.uint32();
                    break;
                case /* uint32 dayOfWeek */ 12:
                    message.dayOfWeek = reader.uint32();
                    break;
                case /* int32 requiredVersion */ 16:
                    message.requiredVersion = reader.int32();
                    break;
                case /* optional string debugApiKey */ 17:
                    message.debugApiKey = reader.string();
                    break;
                case /* optional int32 clientRevision */ 22:
                    message.clientRevision = reader.int32();
                    break;
                case /* optional string deviceSku */ 24:
                    message.deviceSku = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string deviceCountryCode = 1; */
        if (message.deviceCountryCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceCountryCode);
        /* string deviceDisplayLanguage = 3; */
        if (message.deviceDisplayLanguage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceDisplayLanguage);
        /* optional string deviceKeyboardLanguage = 4; */
        if (message.deviceKeyboardLanguage !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.deviceKeyboardLanguage);
        /* optional string deviceSpokenLanguage = 5; */
        if (message.deviceSpokenLanguage !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.deviceSpokenLanguage);
        /* optional uint32 timeSinceMapEnteredForeground = 8; */
        if (message.timeSinceMapEnteredForeground !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.timeSinceMapEnteredForeground);
        /* int32 resultListAttributionSupport = 10; */
        if (message.resultListAttributionSupport !== 0)
            writer.tag(10, WireType.Varint).int32(message.resultListAttributionSupport);
        /* optional uint32 hourOfDay = 11; */
        if (message.hourOfDay !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.hourOfDay);
        /* uint32 dayOfWeek = 12; */
        if (message.dayOfWeek !== 0)
            writer.tag(12, WireType.Varint).uint32(message.dayOfWeek);
        /* int32 requiredVersion = 16; */
        if (message.requiredVersion !== 0)
            writer.tag(16, WireType.Varint).int32(message.requiredVersion);
        /* optional string debugApiKey = 17; */
        if (message.debugApiKey !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.debugApiKey);
        /* optional int32 clientRevision = 22; */
        if (message.clientRevision !== undefined)
            writer.tag(22, WireType.Varint).int32(message.clientRevision);
        /* optional string deviceSku = 24; */
        if (message.deviceSku !== undefined)
            writer.tag(24, WireType.LengthDelimited).string(message.deviceSku);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GEOPDClientMetadata
 */
export const GEOPDClientMetadata = new GEOPDClientMetadata$Type();
